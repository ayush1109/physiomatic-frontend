[{"D:\\physiomatic\\dashboard-main\\src\\index.js":"1","D:\\physiomatic\\dashboard-main\\src\\actions\\appointmentAction.jsx":"2","D:\\physiomatic\\dashboard-main\\src\\App.js":"3","D:\\physiomatic\\dashboard-main\\src\\actions\\userAction.jsx":"4","D:\\physiomatic\\dashboard-main\\src\\actions\\patientAction.jsx":"5","D:\\physiomatic\\dashboard-main\\src\\api\\physiomaticApi.js":"6","D:\\physiomatic\\dashboard-main\\src\\db.js":"7","D:\\physiomatic\\dashboard-main\\src\\actions\\types.jsx":"8","D:\\physiomatic\\dashboard-main\\src\\actions\\sideBarAction.jsx":"9","D:\\physiomatic\\dashboard-main\\src\\helpers\\setAuthToken.js":"10","D:\\physiomatic\\dashboard-main\\src\\reducers\\index.jsx":"11","D:\\physiomatic\\dashboard-main\\src\\components\\NavBar.jsx":"12","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\SettingContainer.jsx":"13","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\Container.jsx":"14","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\Intervention.jsx":"15","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\ScheduleManagment.jsx":"16","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddPatientDetails.jsx":"17","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\AddApointmentContainer.jsx":"18","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\Patient.jsx":"19","D:\\physiomatic\\dashboard-main\\src\\components\\EhrComponent\\EhrMngmnt.jsx":"20","D:\\physiomatic\\dashboard-main\\src\\components\\Plan\\Plan.jsx":"21","D:\\physiomatic\\dashboard-main\\src\\components\\SideBar\\Left.jsx":"22","D:\\physiomatic\\dashboard-main\\src\\components\\Feedback\\FeedbackForm.jsx":"23","D:\\physiomatic\\dashboard-main\\src\\components\\Feedback\\Feedback.jsx":"24","D:\\physiomatic\\dashboard-main\\src\\components\\SideBar\\TopDrawer.jsx":"25","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\DemographicData.jsx":"26","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\History.jsx":"27","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Sensory.jsx":"28","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Examination.jsx":"29","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\ProgramBuilder.jsx":"30","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\ExercisePrescription.jsx":"31","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\Exercise.jsx":"32","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Pain.jsx":"33","D:\\physiomatic\\dashboard-main\\src\\helpers\\getDataFromToken.jsx":"34","D:\\physiomatic\\dashboard-main\\src\\reducers\\userReducer.jsx":"35","D:\\physiomatic\\dashboard-main\\src\\reducers\\feedbackReducer.jsx":"36","D:\\physiomatic\\dashboard-main\\src\\reducers\\invoiceReducer.jsx":"37","D:\\physiomatic\\dashboard-main\\src\\reducers\\treatmentReducer.jsx":"38","D:\\physiomatic\\dashboard-main\\src\\reducers\\tableReducer.jsx":"39","D:\\physiomatic\\dashboard-main\\src\\reducers\\exerciseReducer.jsx":"40","D:\\physiomatic\\dashboard-main\\src\\reducers\\patientReducer.jsx":"41","D:\\physiomatic\\dashboard-main\\src\\reducers\\appointmentReducer.jsx":"42","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\BrandingForm.jsx":"43","D:\\physiomatic\\dashboard-main\\src\\reducers\\SideBarReducer.jsx":"44","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\MyProfileForm.jsx":"45","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\ConsentForm.jsx":"46","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\CalenderForm.jsx":"47","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\BasicContainer.jsx":"48","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\ProductForm.jsx":"49","D:\\physiomatic\\dashboard-main\\src\\components\\SideBar\\SideBar.jsx":"50","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\ExerciseForm.jsx":"51","D:\\physiomatic\\dashboard-main\\src\\actions\\exerciseAction.jsx":"52","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\ExerciseCards.jsx":"53","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\CaseReportForm.jsx":"54","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\InvoiceForm.jsx":"55","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\SMSForm.jsx":"56","D:\\physiomatic\\dashboard-main\\src\\components\\Menus\\SettingMenu.jsx":"57","D:\\physiomatic\\dashboard-main\\src\\components\\Tables\\AppointmentTable.jsx":"58","D:\\physiomatic\\dashboard-main\\src\\components\\LandingPage\\ErrorComponent\\PointingError.jsx":"59","D:\\physiomatic\\dashboard-main\\src\\components\\Tables\\Table.jsx":"60","D:\\physiomatic\\dashboard-main\\src\\actions\\feedbackAction.jsx":"61","D:\\physiomatic\\dashboard-main\\src\\components\\Tabs\\CenteredTab.jsx":"62","D:\\physiomatic\\dashboard-main\\src\\components\\Grid\\TopDrawerGrid.jsx":"63","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Pediatric.jsx":"64","D:\\physiomatic\\dashboard-main\\src\\components\\Buttons\\UpgradeButton.jsx":"65","D:\\physiomatic\\dashboard-main\\src\\components\\Fab\\fab.jsx":"66","D:\\physiomatic\\dashboard-main\\src\\components\\Card\\Card.jsx":"67","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\ChiefComplaint.jsx":"68","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Neuro.jsx":"69","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\TreatmentProtocol.jsx":"70","D:\\physiomatic\\dashboard-main\\src\\components\\Stepper\\Stepper.jsx":"71","D:\\physiomatic\\dashboard-main\\src\\components\\Calendar\\Calendar.jsx":"72","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddNewTreatmentCategory.jsx":"73","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Goals.jsx":"74","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddDiagnosis.jsx":"75","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\FormLayout.jsx":"76","D:\\physiomatic\\dashboard-main\\src\\actions\\tableAction.jsx":"77","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\MasterForm.jsx":"78","D:\\physiomatic\\dashboard-main\\src\\components\\Grid\\CenteredGrid.jsx":"79","D:\\physiomatic\\dashboard-main\\src\\components\\Charts\\BarChart.jsx":"80","D:\\physiomatic\\dashboard-main\\src\\components\\JumboButton\\JumboButton.jsx":"81","D:\\physiomatic\\dashboard-main\\src\\components\\LandingPage\\Dividers\\VerticalDivider.jsx":"82","D:\\physiomatic\\dashboard-main\\src\\helpers\\findOne.js":"83","D:\\physiomatic\\dashboard-main\\src\\actions\\invoiceAction.jsx":"84","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\TreatmentCalender.jsx":"85","D:\\physiomatic\\dashboard-main\\src\\components\\EhrComponent\\Step1.jsx":"86","D:\\physiomatic\\dashboard-main\\src\\components\\EhrComponent\\Step3.jsx":"87","D:\\physiomatic\\dashboard-main\\src\\components\\Fab\\CustomFab.jsx":"88","D:\\physiomatic\\dashboard-main\\src\\components\\EhrComponent\\Step2.jsx":"89","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddAppointment.jsx":"90","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddNewTreatment.jsx":"91","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Diagnosis.jsx":"92","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddPatient.jsx":"93","D:\\physiomatic\\dashboard-main\\src\\actions\\treatmentAction.jsx":"94","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\TreatmentForm.jsx":"95","D:\\physiomatic\\dashboard-main\\src\\components\\Paper\\paper.jsx":"96","D:\\physiomatic\\dashboard-main\\src\\components\\LandingPage\\Login\\Login.jsx":"97","D:\\physiomatic\\dashboard-main\\src\\components\\LandingPage\\Register\\Register.jsx":"98","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Motor.jsx":"99","D:\\physiomatic\\dashboard-main\\src\\actions\\demographicAction.jsx":"100","D:\\physiomatic\\dashboard-main\\src\\reducers\\demographicDataReducer.jsx":"101","D:\\physiomatic\\dashboard-main\\src\\reducers\\motorExaminationReducer.jsx":"102","D:\\physiomatic\\dashboard-main\\src\\actions\\motorExaminationAction.jsx":"103"},{"size":1009,"mtime":1620037757000,"results":"104","hashOfConfig":"105"},{"size":1671,"mtime":1620037757000,"results":"106","hashOfConfig":"105"},{"size":5210,"mtime":1620037757000,"results":"107","hashOfConfig":"105"},{"size":2006,"mtime":1620037757000,"results":"108","hashOfConfig":"105"},{"size":1517,"mtime":1620037757000,"results":"109","hashOfConfig":"105"},{"size":316,"mtime":1620037757000,"results":"110","hashOfConfig":"105"},{"size":9619,"mtime":1620037757000,"results":"111","hashOfConfig":"105"},{"size":1961,"mtime":1621074906082,"results":"112","hashOfConfig":"105"},{"size":627,"mtime":1620037757000,"results":"113","hashOfConfig":"105"},{"size":317,"mtime":1620037757000,"results":"114","hashOfConfig":"105"},{"size":1127,"mtime":1621075052433,"results":"115","hashOfConfig":"105"},{"size":10017,"mtime":1620037757000,"results":"116","hashOfConfig":"105"},{"size":2227,"mtime":1620037757000,"results":"117","hashOfConfig":"105"},{"size":10421,"mtime":1620037757000,"results":"118","hashOfConfig":"105"},{"size":1006,"mtime":1620037757000,"results":"119","hashOfConfig":"105"},{"size":3673,"mtime":1620037757000,"results":"120","hashOfConfig":"105"},{"size":273,"mtime":1620037757000,"results":"121","hashOfConfig":"105"},{"size":305,"mtime":1620037757000,"results":"122","hashOfConfig":"105"},{"size":1674,"mtime":1620636499190,"results":"123","hashOfConfig":"105"},{"size":2891,"mtime":1620037757000,"results":"124","hashOfConfig":"105"},{"size":2559,"mtime":1620037757000,"results":"125","hashOfConfig":"105"},{"size":476,"mtime":1620037757000,"results":"126","hashOfConfig":"105"},{"size":22758,"mtime":1620037757000,"results":"127","hashOfConfig":"105"},{"size":1058,"mtime":1620037757000,"results":"128","hashOfConfig":"105"},{"size":1273,"mtime":1620037757000,"results":"129","hashOfConfig":"105"},{"size":12689,"mtime":1621075483719,"results":"130","hashOfConfig":"105"},{"size":16798,"mtime":1620037757000,"results":"131","hashOfConfig":"105"},{"size":78451,"mtime":1620037757000,"results":"132","hashOfConfig":"105"},{"size":6682,"mtime":1620037757000,"results":"133","hashOfConfig":"105"},{"size":4607,"mtime":1620120521695,"results":"134","hashOfConfig":"105"},{"size":8636,"mtime":1620037757000,"results":"135","hashOfConfig":"105"},{"size":2234,"mtime":1620037757000,"results":"136","hashOfConfig":"105"},{"size":12653,"mtime":1620391398642,"results":"137","hashOfConfig":"105"},{"size":177,"mtime":1620037757000,"results":"138","hashOfConfig":"105"},{"size":697,"mtime":1620037757000,"results":"139","hashOfConfig":"105"},{"size":351,"mtime":1620037757000,"results":"140","hashOfConfig":"105"},{"size":409,"mtime":1620037757000,"results":"141","hashOfConfig":"105"},{"size":312,"mtime":1620037757000,"results":"142","hashOfConfig":"105"},{"size":239,"mtime":1620037757000,"results":"143","hashOfConfig":"105"},{"size":628,"mtime":1620037757000,"results":"144","hashOfConfig":"105"},{"size":707,"mtime":1620037757000,"results":"145","hashOfConfig":"105"},{"size":828,"mtime":1620037757000,"results":"146","hashOfConfig":"105"},{"size":26663,"mtime":1620037757000,"results":"147","hashOfConfig":"105"},{"size":781,"mtime":1620037757000,"results":"148","hashOfConfig":"105"},{"size":5999,"mtime":1620037757000,"results":"149","hashOfConfig":"105"},{"size":1150,"mtime":1620037757000,"results":"150","hashOfConfig":"105"},{"size":11949,"mtime":1620037757000,"results":"151","hashOfConfig":"105"},{"size":1265,"mtime":1620037757000,"results":"152","hashOfConfig":"105"},{"size":5185,"mtime":1620037757000,"results":"153","hashOfConfig":"105"},{"size":7228,"mtime":1620037757000,"results":"154","hashOfConfig":"105"},{"size":3066,"mtime":1620125840364,"results":"155","hashOfConfig":"105"},{"size":937,"mtime":1620037757000,"results":"156","hashOfConfig":"105"},{"size":682,"mtime":1620118469206,"results":"157","hashOfConfig":"105"},{"size":11934,"mtime":1620037757000,"results":"158","hashOfConfig":"105"},{"size":5390,"mtime":1620037757000,"results":"159","hashOfConfig":"105"},{"size":13042,"mtime":1620037757000,"results":"160","hashOfConfig":"105"},{"size":1543,"mtime":1620037757000,"results":"161","hashOfConfig":"105"},{"size":2857,"mtime":1620037757000,"results":"162","hashOfConfig":"105"},{"size":696,"mtime":1620037757000,"results":"163","hashOfConfig":"105"},{"size":2218,"mtime":1620037757000,"results":"164","hashOfConfig":"105"},{"size":852,"mtime":1620037757000,"results":"165","hashOfConfig":"105"},{"size":1210,"mtime":1620037757000,"results":"166","hashOfConfig":"105"},{"size":1836,"mtime":1620037757000,"results":"167","hashOfConfig":"105"},{"size":4575,"mtime":1620037757000,"results":"168","hashOfConfig":"105"},{"size":429,"mtime":1620037757000,"results":"169","hashOfConfig":"105"},{"size":1144,"mtime":1620037757000,"results":"170","hashOfConfig":"105"},{"size":1352,"mtime":1620037757000,"results":"171","hashOfConfig":"105"},{"size":12710,"mtime":1620037757000,"results":"172","hashOfConfig":"105"},{"size":45936,"mtime":1620741480246,"results":"173","hashOfConfig":"105"},{"size":8028,"mtime":1620037757000,"results":"174","hashOfConfig":"105"},{"size":5773,"mtime":1620037757000,"results":"175","hashOfConfig":"105"},{"size":6438,"mtime":1620037757000,"results":"176","hashOfConfig":"105"},{"size":2223,"mtime":1620037757000,"results":"177","hashOfConfig":"105"},{"size":3845,"mtime":1620037757000,"results":"178","hashOfConfig":"105"},{"size":7362,"mtime":1620037757000,"results":"179","hashOfConfig":"105"},{"size":17260,"mtime":1620037757000,"results":"180","hashOfConfig":"105"},{"size":204,"mtime":1620037757000,"results":"181","hashOfConfig":"105"},{"size":8871,"mtime":1620037757000,"results":"182","hashOfConfig":"105"},{"size":996,"mtime":1620037757000,"results":"183","hashOfConfig":"105"},{"size":828,"mtime":1620037757000,"results":"184","hashOfConfig":"105"},{"size":2396,"mtime":1620037757000,"results":"185","hashOfConfig":"105"},{"size":939,"mtime":1620037757000,"results":"186","hashOfConfig":"105"},{"size":287,"mtime":1620037757000,"results":"187","hashOfConfig":"105"},{"size":875,"mtime":1620037757000,"results":"188","hashOfConfig":"105"},{"size":861,"mtime":1620037757000,"results":"189","hashOfConfig":"105"},{"size":5569,"mtime":1620037757000,"results":"190","hashOfConfig":"105"},{"size":4862,"mtime":1620037757000,"results":"191","hashOfConfig":"105"},{"size":809,"mtime":1620037757000,"results":"192","hashOfConfig":"105"},{"size":4131,"mtime":1620037757000,"results":"193","hashOfConfig":"105"},{"size":1315,"mtime":1620037757000,"results":"194","hashOfConfig":"105"},{"size":5585,"mtime":1620037757000,"results":"195","hashOfConfig":"105"},{"size":4627,"mtime":1620037757000,"results":"196","hashOfConfig":"105"},{"size":5337,"mtime":1620037757000,"results":"197","hashOfConfig":"105"},{"size":904,"mtime":1620037757000,"results":"198","hashOfConfig":"105"},{"size":3049,"mtime":1620037757000,"results":"199","hashOfConfig":"105"},{"size":984,"mtime":1620037757000,"results":"200","hashOfConfig":"105"},{"size":2778,"mtime":1620037757000,"results":"201","hashOfConfig":"105"},{"size":25632,"mtime":1620037757000,"results":"202","hashOfConfig":"105"},{"size":584093,"mtime":1621228719183,"results":"203","hashOfConfig":"105"},{"size":1349,"mtime":1621051873770,"results":"204","hashOfConfig":"105"},{"size":933,"mtime":1620982761242,"results":"205","hashOfConfig":"105"},{"size":889,"mtime":1621075016437,"results":"206","hashOfConfig":"105"},{"size":1257,"mtime":1621075275361,"results":"207","hashOfConfig":"105"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},"1lmdryp",{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"210"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"210"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"210"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"210"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"210"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"210"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"210"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"210"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"210"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"210"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"210"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"210"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"210"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"210"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"210"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"210"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"210"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"210"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"210"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"210"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"210"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"210"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"210"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"210"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"210"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"210"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"210"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"210"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"210"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"210"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"210"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"210"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"210"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"210"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"210"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"210"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"210"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"210"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\physiomatic\\dashboard-main\\src\\index.js",[],["454","455"],"D:\\physiomatic\\dashboard-main\\src\\actions\\appointmentAction.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\App.js",["456","457","458","459","460"],"import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport { connect } from \"react-redux\";\nimport { closeSideBar, closeDropDown } from \"./actions/sideBarAction\";\nimport LeftSideBar from \"./components/SideBar/Left\";\nimport DashboardContainer from \"./components/Container/Container\";\nimport SettingContainer from \"./components/Container/SettingContainer\";\nimport ScheduleContainer from \"./components/Container/ScheduleManagment\";\nimport TopDrawer from \"./components/SideBar/TopDrawer\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport HistoryIcon from \"@material-ui/icons/History\";\nimport { walletData } from \"./db\";\nimport AddApointment from \"./components/Container/AddApointmentContainer\";\nimport Plan from \"./components/Plan/Plan\";\nimport EhrMngmnt from \"./components/EhrComponent/EhrMngmnt\";\nimport AddPatientDetails from \"./components/Forms/AddPatientDetails\";\nimport Feedback from \"./components/Feedback/Feedback\";\nimport FeedbackForm from \"./components/Feedback/FeedbackForm\";\nimport { getAllPatients } from \"./actions/patientAction\";\nimport { getAllApointments } from \"./actions/appointmentAction\";\nimport Examination from \"./components/Forms/Assessments/Examination\";\nimport Patient from \"./components/Container/Patient\";\nimport DemographicData from \"./components/Forms/Assessments/DemographicData\";\nimport History from \"./components/Forms/Assessments/History\";\nimport Pain from \"./components/Forms/Assessments/Pain\";\nimport Sensory from \"./components/Forms/Assessments/Sensory\";\nimport Intervention from \"./components/Container/Intervention\";\n\nimport ExercisePrescription from \"./components/Forms/Exercise_Prescription/ExercisePrescription\";\nimport ProgramBuilder from \"./components/Forms/Exercise_Prescription/ProgramBuilder\";\nimport Exercise from \"./components/Forms/Exercise_Prescription/Exercise\";\n\nclass App extends Component {\n  state = { isOpenDialog: false, popup: false };\n\n  closeSideBarHandler = () => {\n    if (this.props.isDrawerOpen) {\n      if (this.props.isDropDownOpen) this.props.closeDropDown();\n      this.props.closeSideBar();\n    }\n  };\n  setpopup = (value) => {\n    console.log(value);\n    this.setState({ popup: value });\n  };\n\n  onBodyClick = () => {\n    if (this.state.popup) this.setState({ popup: false });\n  };\n\n  walletPopup = () => {\n    if (this.state.popup)\n      return (\n        <div\n          class=\"ui cards\"\n          style={{\n            position: \"absolute\",\n            zIndex: \"5\",\n            marginTop: \"-50px\",\n            marginLeft: \"80%\",\n            marginBottom: \"-65px\",\n          }}\n        >\n          <div className=\"card\">\n            <div className=\"content\">\n              <div className=\"header\">Amount: ₹ {walletData.balance}</div>\n              <div\n                className=\"description\"\n                style={{\n                  backgroundColor: \"rgb(200,200,200)\",\n                  cursor: \"pointer\",\n                  padding: \"5px\",\n                }}\n              >\n                <HistoryIcon /> Transaction History\n              </div>\n            </div>\n            <div className=\"ui bottom attached button\">\n              {walletData.remainingDays} days Remaining\n            </div>\n          </div>\n        </div>\n      );\n    else return undefined;\n  };\n  render() {\n    return (\n      <div onClick={this.onBodyClick}>\n        <BrowserRouter>\n          <div onClick={this.closeSideBarHandler}>\n            <NavBar\n              setWalletDialog={this.setWalletDialog}\n              setPopup={this.setpopup}\n            />\n            {this.walletPopup()}\n\n            <TopDrawer />\n          </div>\n          <Switch>\n            <Route exact path=\"/\" component={DashboardContainer} />\n            {/* <Route exact path=\"/login\" component={Divider} /> */}\n            <Route path=\"/settings\" component={SettingContainer} />\n            <Route\n              path=\"/appointmentmanagement\"\n              component={ScheduleContainer}\n            />\n            <Route exact path=\"/add-appointment\" component={AddApointment} />\n            <Route exact path=\"/patients/:id\" component={Intervention} />\n            <Route exact path=\"/patients\" component={EhrMngmnt} />\n            <Route exact path=\"/add-patient\" component={AddPatientDetails} />\n            <Route exact path=\"/feedback\" component={Feedback} />\n            <Route exact path=\"/add-new-feedback\" component={FeedbackForm} />\n            <Route exact path=\"/test\" component={Patient} />\n            <Route exact path=\"/billing\" component={Intervention} />\n            <Route exact path=\"/exercise\" component={ExercisePrescription} />\n            <Route exact path=\"/programBuilder\" component={ProgramBuilder} />\n            <Route exact path=\"/programBuilder/:id\" component={Exercise} />\n\n            <Route path=\"*\" exact={true} component={Plan} />\n          </Switch>\n          <LeftSideBar />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isDrawerOpen: state.sideBarState,\n    isDropDownOpen: state.dropDownState,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  closeSideBar,\n  closeDropDown,\n  getAllApointments,\n  getAllPatients,\n})(App);\n","D:\\physiomatic\\dashboard-main\\src\\actions\\userAction.jsx",["461","462"],"import physiomatica from \"../api/physiomaticApi\";\n\nimport { ERROR, LOGIN, REGISTER, AUTHENTICATE_USER, LOGOUT } from \"./types\";\nimport { getDataFromToken } from \"../helpers/getDataFromToken\";\nimport physiomaticApi from \"../api/physiomaticApi\";\nimport { setAuthToken } from \"../helpers/setAuthToken\";\n\n//Register\nexport const register = (registerData) => async (dispatch) => {\n  try {\n    const response = await physiomatica.post(\"/api/register\", registerData);\n    // const token = response.data.token;\n    const token = response.data;\n    localStorage.setItem(\"token\", token);\n    const user = getDataFromToken(token);\n    setAuthToken(token);\n    dispatch({\n      type: REGISTER,\n      payload: user,\n    });\n  } catch (err) {\n    dispatch({\n      type: ERROR,\n      payload: err.response.data,\n    });\n  }\n};\n\n//Login\nexport const login = (loginData) => async (dispatch) => {\n  try {\n    const response = await physiomatica\n      .post(\"/api/login\", loginData)\n      .then((res) => {\n        //   const { token } = res.data;\n        const token = res.data;\n        localStorage.setItem(\"token\", token);\n\n        setAuthToken(token);\n        const user = getDataFromToken(token);\n        console.log(user);\n        dispatch({\n          type: LOGIN,\n          payload: user,\n        });\n      });\n  } catch (err) {\n    dispatch({\n      type: ERROR,\n      payload: err.response.data,\n    });\n  }\n};\n\nexport const authenticateUser = () => async (dispatch) => {\n  try {\n    const response = await physiomatica.get(\"/api/authenticate\");\n    const token = response.data;\n    localStorage.setItem(\"token\", token);\n\n    const user = getDataFromToken(token);\n    // console.log(user);\n    dispatch({\n      type: AUTHENTICATE_USER,\n      payload: user,\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error.response.data,\n    });\n  }\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  // window.location('/')\n  setAuthToken();\n  return {\n    type: LOGOUT,\n  };\n};\n","D:\\physiomatic\\dashboard-main\\src\\actions\\patientAction.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\api\\physiomaticApi.js",[],"D:\\physiomatic\\dashboard-main\\src\\db.js",[],"D:\\physiomatic\\dashboard-main\\src\\actions\\types.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\actions\\sideBarAction.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\helpers\\setAuthToken.js",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\index.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\NavBar.jsx",["463","464"],"import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Badge from \"@material-ui/core/Badge\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport { Tooltip, Button } from \"@material-ui/core\";\nimport TodayIcon from \"@material-ui/icons/Today\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport GroupAddIcon from \"@material-ui/icons/GroupAdd\";\nimport { Link } from \"react-router-dom\";\n\n// import related to redux\nimport { openSideBar, openTopDrawer } from \"../actions/sideBarAction\";\nimport { connect } from \"react-redux\";\nimport { Typography } from \"@material-ui/core\";\nimport { logout } from \"../actions/userAction\";\n\n// styling of the components\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles((theme) => ({\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n  },\n  sectionDesktop: {\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"flex\",\n    },\n  },\n  sectionMobile: {\n    display: \"flex\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    //necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  hide: {\n    display: \"none\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 75,\n  },\n}));\n\n//Starting of NavBar Component\nfunction NavBar(props) {\n  const initialState = {\n    mouseX: null,\n    mouseY: null,\n  };\n  const [cordinate, setCordinate] = useState(initialState);\n  const [mailCounter, setMailCounter] = useState(0);\n  const handleClickMail = () => {\n    setMailCounter(mailCounter + 1);\n  };\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorE2, setAnchorE2] = useState(null);\n\n  const isMenuOpen = Boolean(anchorEl);\n  const isAddMenuOpen = Boolean(anchorE2);\n\n  const handleProfileMenuOpen = (event) => {\n    // console.log(event.currentTarget);\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const menuId = \"primary-search-account-menu\";\n  const addMenuId = \"add-menu\";\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n      <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n      <MenuItem onClick={logout}>Logout</MenuItem>\n    </Menu>\n  );\n\n  const handleAddMenuClose = () => {\n    setAnchorE2(null);\n  };\n\n  const renderRightClickMenu = () => {\n    return (\n      <Menu\n        keepMounted\n        anchorEl={anchorE2}\n        id={addMenuId}\n        open={isAddMenuOpen}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n        transformOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n        onClose={handleAddMenuClose}\n      >\n        <MenuItem component={Link} to=\"/add-patient\">\n          Add Patient\n        </MenuItem>\n        <MenuItem component={Link} to=\"/add-appointment\">\n          Add Apointment\n        </MenuItem>\n        <MenuItem>Add Income</MenuItem>\n        <MenuItem>Add Expenses</MenuItem>\n      </Menu>\n    );\n  };\n  const handleClick = (event) => {\n    setAnchorE2(event.currentTarget);\n  };\n\n  return (\n    <div>\n      <div style={{ cursor: \"context-menu\" }}>\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: props.isOpen,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              onClick={() => {\n                props.openSideBar();\n              }}\n              edge=\"start\"\n              className={clsx(classes.menuButton, {\n                [classes.hide]: props.isOpen,\n              })}\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <div className={classes.search}>\n              <div className={classes.searchIcon}>\n                <SearchIcon />\n              </div>\n\n              <InputBase\n                placeholder=\"Search…\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                inputProps={{ \"aria-label\": \"search\" }}\n              />\n            </div>\n            <div className={classes.grow} />\n\n            <div className={classes.sectionDesktop}>\n              <Link to=\"/exercise\">\n                <Button>Exercise</Button>\n              </Link>\n              <Link to=\"/billing\">\n                <Button>Billing</Button>\n              </Link>\n              <Link to=\"/test\">\n                <Button>Test</Button>\n              </Link>\n\n              {props.user.isLogedIn && (\n                <Typography>{props.user.user.name}</Typography>\n              )}\n\n              <IconButton onClick={handleClick} color=\"inherit\">\n                <Tooltip title=\"Add Data\" aria-label=\"todays appointments\">\n                  <GroupAddIcon fontSize=\"large\" color=\"inherit\" />\n                </Tooltip>\n              </IconButton>\n\n              <IconButton\n                onClick={() => {\n                  props.setPopup(true);\n                }}\n                color=\"inherit\"\n              >\n                <AccountBalanceWalletIcon color=\"inherit\" />\n              </IconButton>\n\n              <IconButton\n                aria-label=\"todays task\"\n                color=\"inherit\"\n                onClick={props.openTopDrawer}\n              >\n                <Tooltip\n                  title=\"Todays appointments\"\n                  aria-label=\"todays appointments\"\n                >\n                  <TodayIcon />\n                </Tooltip>\n              </IconButton>\n\n              <IconButton\n                aria-label=\"show 4 new mails\"\n                color=\"inherit\"\n                onClick={handleClickMail}\n              >\n                <Badge badgeContent={mailCounter} color=\"secondary\">\n                  <MailIcon />\n                </Badge>\n              </IconButton>\n              <IconButton\n                aria-label=\"show 17 new notifications\"\n                color=\"inherit\"\n              >\n                <Badge badgeContent={17} color=\"secondary\">\n                  <NotificationsIcon />\n                </Badge>\n              </IconButton>\n              <IconButton\n                edge=\"end\"\n                aria-label=\"account of current user\"\n                aria-controls={menuId}\n                aria-haspopup=\"true\"\n                onClick={handleProfileMenuOpen}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n            </div>\n          </Toolbar>\n        </AppBar>\n      </div>\n      {renderMenu}\n      <div>\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: !props.isOpen,\n          })}\n        >\n          <div className={clsx(classes.toolbar)} />\n          {renderRightClickMenu()}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return { isOpen: state.sideBarState, user: state.auth };\n};\n\nexport default connect(mapStateToProps, { openSideBar, openTopDrawer })(NavBar);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\SettingContainer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Container\\Container.jsx",["465","466","467","468","469","470","471","472","473"],"import React from \"react\";\nimport clsx from \"clsx\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n// import Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport CenteredTabs from \"../Tabs/CenteredTab\";\nimport CustomizedTables from \"../Tables/Table\";\nimport CenteredGrid from \"../Grid/CenteredGrid\";\nimport JumboButton from \"../JumboButton/JumboButton\";\nimport { changeHeading } from \"../../actions/tableAction\";\nimport { Dialog, Typography } from \"@material-ui/core\";\nimport BarCharts from \"../Charts/BarChart\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport AppointmentTable from \"../Tables/AppointmentTable\";\nimport DeleteSweepIcon from \"@material-ui/icons/DeleteSweep\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport {\n  headings,\n  headings1,\n  headings2,\n  headings3,\n  rows,\n  rows1,\n  rows2,\n  rows3,\n} from \"../../db\";\nimport Divider from \"../LandingPage/Dividers/VerticalDivider\";\nimport { getAllPatients, deletePatient } from \"../../actions/patientAction\";\nimport {\n  getAllApointments,\n  deleteAppointment,\n} from \"../../actions/appointmentAction\";\nimport FormDialog from \"../Forms/FormLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    flexGrow: 1,\n    paddingLeft: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: 300,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 75,\n  },\n}));\n\nfunction SimpleContainer(props) {\n  React.useEffect(() => {\n    props.getAllPatients();\n    props.getAllApointments();\n  }, []);\n\n  const [openAddAppointment, setOpenAddAppointment] = React.useState(false);\n  const [startStr, setStartStr] = React.useState(\"\");\n  const [endStr, setEndStr] = React.useState(\"\");\n\n  const handleClose = () => {\n    setOpenAddAppointment(false);\n  };\n\n  const totalAppointments = props.appointments ? props.appointments.length : 0;\n  const totalPatients = props.patients ? props.patients.length : 0;\n  const todaysData = [\n    {\n      heading: \"APPOINTMENTS\",\n      data: { count: totalAppointments },\n    },\n    { heading: \"PATIENTS\", data: { count: totalPatients } },\n    { heading: \"INCOME\", data: { count: `₹ ${0}` } },\n    { heading: \"EXPENSES\", data: { count: `₹ ${0}` } },\n  ];\n\n  const tabs = [\"Today's Task\", \"Clinical Stats\"];\n  const classes = useStyles();\n  const [activeTab, setActiveTab] = React.useState(tabs[0]);\n  const changeActiveTab = (index) => {\n    setActiveTab(tabs[index]);\n  };\n\n  const headingArray = [\"APPOINTMENTS\", \"PATIENTS\", \"INCOME\", \"EXPENSES\"];\n  if (!props.isLogedIn) {\n    return <Divider />;\n  }\n\n  const appointmentTableHeading = [\n    { id: \"name\", label: \"Name\" },\n    { id: \"time\", label: \"Time & Date\" },\n    { id: \"visitStatus\", label: \"Visit Status\" },\n    { id: \"billStatus\", label: \"Bill Status\" },\n    { id: \"treatment\", label: \"Treatment\" },\n    { id: \"consultant\", label: \"Consultant\" },\n    { id: \"action\", label: \"Actions\" },\n  ];\n\n  const appointmentData = [];\n\n  const deleteAppointmentHandler = (id) => {\n    console.log(id);\n    props.deleteAppointment(id);\n  };\n\n  // name: string;\n  //   time: string;\n  //   visitStatus: string;\n  //   billStatus: string;\n  //   treatment: string;\n  //   consultant: string;\n  //   action: string;\n\n  props.appointments &&\n    props.appointments.forEach((appointment, index) => {\n      let visitStatus = \"\";\n      if (appointment.status === 0) visitStatus = \"Scheduled\";\n      else if (appointment.status === 1) visitStatus = \"Visited\";\n      else if (appointment.status === -1) visitStatus = \"Missed\";\n      else if (appointment.status === 2) visitStatus = \"Cancelled\";\n      const data = {\n        name: `${appointment.formData.patient.firstName} ${appointment.formData.patient.lastName} `,\n        time: `${new Date(appointment.start).toLocaleTimeString()} : ${new Date(\n          appointment.start\n        ).toDateString()}`,\n        visitStatus,\n        billStatus: \"Pending\",\n        treatment: `${appointment.formData.treatment.name}`,\n        consultant: props.user.name,\n        action: (\n          <div className=\"ui compact menu\">\n            <div className=\"item\">\n              <CreateIcon\n                onClick={() => {\n                  setStartStr(appointment.start);\n                  setEndStr(appointment.end);\n                  setOpenAddAppointment(true);\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <DeleteSweepIcon\n                onClick={() => {\n                  deleteAppointmentHandler(appointment._id);\n                }}\n              />\n            </div>\n          </div>\n        ),\n      };\n      appointmentData.push(data);\n    });\n\n  const patientTableHeading = [\n    { id: \"image\", label: \"Image\" },\n    { id: \"date\", label: \"Date\" },\n    { id: \"patientId\", label: \"Patient Id\" },\n    { id: \"name\", label: \"Name\" },\n    { id: \"mobileNumber\", label: \"Mobile Number\" },\n    { id: \"email\", label: \"Email\" },\n    { id: \"actions\", label: \"Actions\" },\n  ];\n\n  // image: JSX.Element;\n  // date: string;\n  // patientId: string;\n  // name: string;\n  // mobileNumber: string;\n  // email: string;\n  // actions: string;\n  const patientData = [];\n\n  const deletePatientHandler = (id) => {\n    console.log(id);\n    props.deletePatient(id);\n  };\n\n  props.patients &&\n    props.patients.forEach((patient, index) => {\n      const data = {\n        image: <FaceIcon />,\n        date: new Date(patient.date).toDateString(),\n        patientId: patient._id,\n        name: `${patient.firstName} ${patient.lastName} `,\n        mobileNumber: `${patient.mobile}`,\n        email: `${patient.firstName}`,\n        actions: (\n          <DeleteSweepIcon\n            onClick={() => {\n              deletePatientHandler(patient._id);\n            }}\n          />\n        ),\n      };\n      patientData.push(data);\n    });\n\n  const renderTable = () => {\n    const i = headingArray.indexOf(props.heading);\n\n    if (i === 0) {\n      return (\n        <AppointmentTable\n          title={headingArray[i]}\n          headings={appointmentTableHeading}\n          rows={appointmentData}\n        />\n      );\n    }\n    if (i === 1) {\n      return (\n        <AppointmentTable\n          title={headingArray[i]}\n          headings={patientTableHeading}\n          rows={patientData}\n        />\n      );\n    }\n    if (i === 2) {\n      return (\n        <AppointmentTable\n          title={headingArray[i]}\n          headings={headings2}\n          rows={appointmentData}\n        />\n      );\n    }\n    if (i === 3) {\n      return (\n        <AppointmentTable\n          title={headingArray[i]}\n          headings={headings3}\n          rows={appointmentData}\n        />\n      );\n    }\n  };\n\n  const renderTodaysTask = () => {\n    return (\n      <div>\n        <JumboButton count={4} width={3} data={todaysData} showBox={true} />\n\n        <CenteredGrid />\n\n        <CssBaseline />\n        {renderTable()}\n      </div>\n    );\n  };\n  const renderClinicalStats = () => {\n    return (\n      <div>\n        <div style={{ paddingTop: \"10px\" }}>\n          <Typography display=\"initial\" variant=\"h3\">\n            Clinical Stats\n          </Typography>\n        </div>\n        <div style={{ paddingTop: \"10px\" }}>\n          <JumboButton\n            count={4}\n            width={6}\n            data={todaysData}\n            arrowIcon={true}\n          ></JumboButton>\n        </div>\n\n        <div style={{ paddingTop: \"30px\" }}>\n          <Typography display=\"initial\" variant=\"h4\">\n            New Patient Entry [ Per Day ]\n          </Typography>\n          <div style={{ paddingTop: \"20px\" }}>\n            <BarCharts />\n          </div>\n        </div>\n        <Divider />\n        <div style={{ paddingTop: \"30px\" }}>\n          <Typography display=\"initial\" variant=\"h4\">\n            Number Of Patients Treated Per Day [ Derived From Session Reporting\n            ]\n          </Typography>\n          <div style={{ paddingTop: \"20px\" }}>\n            <BarCharts />\n          </div>\n        </div>\n        <Divider />\n        <div style={{ paddingTop: \"30px\" }}>\n          <Typography display=\"initial\" variant=\"h4\">\n            Income Analytics [ Only For Month Wise ]\n          </Typography>\n          <div style={{ paddingTop: \"20px\" }}>\n            <BarCharts />\n          </div>\n        </div>\n        <Divider />\n        <div style={{ paddingTop: \"30px\" }}>\n          <Typography display=\"initial\" variant=\"h4\">\n            Conditions Analytics [ Only For Month Wise ]\n          </Typography>\n          <div style={{ paddingTop: \"20px\" }}>\n            <BarCharts />\n          </div>\n        </div>\n        <Divider />\n        <div style={{ paddingTop: \"30px\" }}>\n          <Typography display=\"initial\" variant=\"h4\">\n            Appointment Analytics\n          </Typography>\n          <div style={{ paddingTop: \"20px\" }}>\n            <BarCharts />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Container\n        maxWidth=\"lg\"\n        className={clsx(classes.content, {\n          [classes.contentShift]: !props.isOpen,\n        })}\n      >\n        {openAddAppointment && (\n          <Dialog\n            maxWidth=\"md\"\n            open={openAddAppointment}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <FormDialog\n              onClose={handleClose}\n              startStr={startStr}\n              endStr={endStr}\n            />\n          </Dialog>\n        )}\n        <CenteredTabs headings={tabs} changeActiveTab={changeActiveTab} />\n        {activeTab === tabs[0] ? renderTodaysTask() : renderClinicalStats()}\n      </Container>\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isOpen: state.sideBarState,\n    heading: state.tableHeading,\n    appointments: state.appointments,\n    patients: state.patients,\n    isLogedIn: state.auth.isLogedIn,\n    user: state.auth.user,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getAllApointments,\n  getAllPatients,\n  deletePatient,\n  deleteAppointment,\n})(SimpleContainer);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\Intervention.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Container\\ScheduleManagment.jsx",["474","475","476"],"import React from \"react\";\nimport BasicContainer from \"./BasicContainer\";\nimport AppointmentTable from \"../Tables/AppointmentTable\";\nimport CenteredTabs from \"../Tabs/CenteredTab\";\nimport {\n  appointmentsTableData,\n  missedAppointmentsTableData,\n  cancelledAppointmentsTableData,\n  appointmentsTableHeading,\n  missedAppointmentsTableHeadings,\n  cancelledAppointmentsTableHeadings,\n} from \"../../db\";\nimport { connect } from \"react-redux\";\n\nconst ScheduleManagment = (props) => {\n  const [activeTab, setActiveTab] = React.useState(0);\n\n  const table1Data = [];\n  const table2Data = [];\n  const table3Data = [];\n\n  props.appointments &&\n    props.appointments.forEach((appointment, index) => {\n      let visitStatus = \"\";\n\n      if (appointment.status === 0) {\n        visitStatus = \"Scheduled\";\n        const data = {\n          date: new Date(appointment.start).toDateString(),\n          ptName: `${appointment.formData.patient.firstName} ${appointment.formData.patient.lastName} `,\n          time: new Date(appointment.start).toLocaleTimeString(),\n          visitStatus,\n          billStatus: \"Pending\",\n          ctName: props.auth.user.name,\n          actions: \"Pending\",\n        };\n        table1Data.push(data);\n      }\n\n      if (appointment.status === 1) {\n        visitStatus = \"Visited\";\n        const data = {\n          date: new Date(appointment.start).toDateString(),\n          ptName: `${appointment.formData.patient.firstName} ${appointment.formData.patient.lastName} `,\n          time: new Date(appointment.start).toLocaleTimeString(),\n          visitStatus,\n          billStatus: \"Pending\",\n          ctName: props.auth.user.name,\n          actions: \"Pending\",\n        };\n        table1Data.push(data);\n      }\n\n      if (appointment.status === -1) {\n        visitStatus = \"Missed\";\n        const data = {\n          date: new Date(appointment.start).toDateString(),\n          ptName: `${appointment.formData.patient.firstName} ${appointment.formData.patient.lastName} `,\n          time: new Date(appointment.start).toLocaleTimeString(),\n          visitStatus,\n          billStatus: \"Pending\",\n          ctName: props.auth.user.name,\n          actions: \"Pending\",\n        };\n        table2Data.push(data);\n      }\n\n      if (appointment.status === 2) {\n        visitStatus = \"Cancelled\";\n        const data = {\n          date: new Date(appointment.start).toDateString(),\n          ptName: `${appointment.formData.patient.firstName} ${appointment.formData.patient.lastName} `,\n          time: new Date(appointment.start).toLocaleTimeString(),\n          visitStatus,\n          billStatus: \"Pending\",\n          ctName: props.auth.user.name,\n          actions: \"Pending\",\n        };\n        table3Data.push(data);\n      }\n    });\n\n  const headings = [\n    \"Appointments\",\n    \"Missed Appointments\",\n    \"Cancelled Appointments\",\n  ];\n\n  let tableHeading = [];\n  let tableData = [];\n  if (activeTab === 0) {\n    tableHeading = appointmentsTableHeading;\n    tableData = table1Data;\n  }\n  if (activeTab === 1) {\n    tableHeading = missedAppointmentsTableHeadings;\n    tableData = table2Data;\n  }\n  if (activeTab === 2) {\n    tableHeading = cancelledAppointmentsTableHeadings;\n    tableData = table3Data;\n  }\n\n  const renderTable = () => {\n    return <AppointmentTable headings={tableHeading} rows={tableData} />;\n  };\n\n  return (\n    <BasicContainer>\n      <CenteredTabs headings={headings} changeActiveTab={setActiveTab} />\n      <div>{renderTable()}</div>\n    </BasicContainer>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth,\n    appointments: state.appointments,\n  };\n};\n\nexport default connect(mapStateToProps)(ScheduleManagment);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddPatientDetails.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Container\\AddApointmentContainer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Container\\Patient.jsx",["477"],"import React from \"react\";\nimport BasicContainer from \"./BasicContainer\";\nimport CenteredTabs from \"../Tabs/CenteredTab\";\nimport Examination from \"../Forms/Assessments/Examination\";\nimport Pain from \"../Forms/Assessments/Pain\";\nimport ChiefComplaint from \"../Forms/Assessments/ChiefComplaint\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Sensory from \"../Forms/Assessments/Sensory\";\nimport History from \"../Forms/Assessments/History\";\nimport DemographicData from \"../Forms/Assessments/DemographicData\";\nimport Neuro from \"../Forms/Assessments/Neuro\";\nimport Pediatric from \"../Forms/Assessments/Pediatric\";\nimport Motor from \"../Forms/Assessments/Motor\";\n\nexport default function Patient(props) {\n  const [activeTab, setActiveTab] = React.useState(0);\n\n  const headings = [\n    \"Demographic Data\",\n    \"Chief Complaints\",\n    \"History\",\n    \"Pain\",\n    \"Examination\",\n    \"Motor Examination\",\n    \"Sensory Examination\",\n    \"Neuro Examination\",\n    \"Paediatric Evaluation\",\n  ];\n\n  const renderForm = () => {\n    if (activeTab === 0) return <DemographicData />;\n    if (activeTab === 1) return <ChiefComplaint />;\n    if (activeTab === 2) return <History />;\n    if (activeTab === 3) return <Pain />;\n    if (activeTab === 4) return <Examination />;\n    if(activeTab === 5) return <Motor />\n    if (activeTab === 6) return <Sensory />;\n    if (activeTab === 7) return <Neuro />;\n    if (activeTab === 8) return <Pediatric />;\n  };\n\n  return (\n    <BasicContainer>\n      <CenteredTabs\n        headings={headings}\n        scrollable={true}\n        changeActiveTab={setActiveTab}\n      />\n      <br />\n      <br />\n      {renderForm()}\n    </BasicContainer>\n  );\n}\n","D:\\physiomatic\\dashboard-main\\src\\components\\EhrComponent\\EhrMngmnt.jsx",["478","479"],"import React from \"react\";\nimport BasicContainer from \"../Container/BasicContainer\";\nimport CenteredTabs from \"../Tabs/CenteredTab\";\nimport AppointmentTable from \"../Tables/AppointmentTable\";\nimport { ehrTableData, ehrmngmntTableHeading } from \"../../db\";\nimport AddPatientDetails from \"../Forms/AddPatientDetails\";\nimport { connect } from \"react-redux\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport { Link } from \"react-router-dom\";\nimport { getPatientById } from \"../../actions/patientAction\";\n\nconst EhrMngmnt = (props) => {\n  const [activeTab, setActiveTab] = React.useState(0);\n\n  const table1Data = [];\n  const table2Data = [];\n\n  props.patients &&\n    props.patients.forEach((patient, index) => {\n      if (patient.patientType === \"home\") {\n        const data = {\n          image: <FaceIcon />,\n          patientId: patient._id,\n          date: new Date(patient.date).toDateString(),\n          name: (\n            <Link\n              to={`patients/${patient._id}`}\n              onClick={() => {\n                props.getPatientById(patient._id);\n              }}\n            >\n              {`${patient.firstName} ${patient.lastName}`}\n            </Link>\n          ),\n\n          mobileNumber: `${patient.mobile}`,\n          email: `${patient.firstName}`,\n\n          actions: \"Pending\",\n        };\n        table1Data.push(data);\n      }\n\n      if (patient.patientType === \"op\") {\n        const data = {\n          image: <FaceIcon />,\n          patientId: patient._id,\n          date: new Date(patient.date).toDateString(),\n\n          name: (\n            <Link\n              to={`patients/${patient._id}`}\n              onClick={() => {\n                props.getPatientById(patient._id);\n              }}\n            >\n              {`${patient.firstName} ${patient.lastName}`}\n            </Link>\n          ),\n\n          mobileNumber: `${patient.mobile}`,\n          email: `${patient.firstName}`,\n\n          actions: \"Pending\",\n        };\n        table2Data.push(data);\n      }\n    });\n\n  const headings = [\n    \"Home Patients List\",\n    \"Out Patients List\",\n    \"List Of Patients Request\",\n  ];\n\n  let tableHeading = [];\n  let tableData = [];\n  if (activeTab === 0) {\n    tableHeading = ehrmngmntTableHeading;\n    tableData = table1Data;\n  }\n  if (activeTab === 1) {\n    tableHeading = ehrmngmntTableHeading;\n    tableData = table2Data;\n  }\n  if (activeTab === 2) {\n    tableHeading = ehrmngmntTableHeading;\n    tableData = [];\n  }\n\n  const renderTable = () => {\n    return <AppointmentTable headings={tableHeading} rows={tableData} />;\n  };\n\n  return (\n    <BasicContainer>\n      <CenteredTabs headings={headings} changeActiveTab={setActiveTab} />\n      <div>{renderTable()}</div>\n    </BasicContainer>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    patients: state.patients,\n  };\n};\n\nexport default connect(mapStateToProps, { getPatientById })(EhrMngmnt);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Plan\\Plan.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\SideBar\\Left.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Feedback\\FeedbackForm.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Feedback\\Feedback.jsx",["480","481"],"import React from \"react\";\nimport CustomizedTables from \"../Tables/Table\";\nimport BasicContainer from \"../Container/BasicContainer\";\nimport { feedbackTableHeading, feedbackTableData } from \"../../db\";\nimport { getFeedback } from \"../../actions/feedbackAction\";\nimport { connect } from \"react-redux\";\n\nfunction Feedback(props) {\n  React.useEffect(() => {\n    props.getFeedback();\n  }, []);\n  const feedbackTableData = props.feedbacks.map((feedback) => ({\n    date: new Date(feedback.date).toDateString(),\n    ptName: feedback.patientName,\n    score: feedback.score,\n    recommend: feedback.recommend ? \"Yes\" : \"No\",\n    actions: \"actions\",\n  }));\n  return (\n    <BasicContainer>\n      <h2 class=\"ui dividing header\">FEEDBACK LIST</h2>\n      <CustomizedTables\n        title={\"New Feedback\"}\n        headings={feedbackTableHeading}\n        rows={feedbackTableData}\n      />\n    </BasicContainer>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    feedbacks: state.feedbacks,\n  };\n};\n\nexport default connect(mapStateToProps, { getFeedback })(Feedback);\n","D:\\physiomatic\\dashboard-main\\src\\components\\SideBar\\TopDrawer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\DemographicData.jsx",["482","483"],"import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { Grid } from \"@material-ui/core\";\nimport Validator from \"validator\";\nimport _ from \"lodash\"; \nimport PointingError from \"../../LandingPage/ErrorComponent/PointingError\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport BasicContainer from \"../../Container/BasicContainer\";\nimport { addDemograpicData } from \"../../../actions/demographicAction\";\nimport { connect } from \"react-redux\";\n\nfunction DemographicData(props) {\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n    props.addDemograpicData(formValues);\n  };\n\n  const [demographicData, setDemographicData] = React.useState({\n    c1: {},\n    c2: {},\n  });\n\n  const validate = (formValues) => {\n    const errors = {};\n    // email\n\n    if (formValues.name && formValues.name.length < 5)\n      errors.name = \"Name should be 5 characters long\";\n    if (!formValues.name) errors.name = \"Patient Name is required\";\n    if (formValues.firstName && formValues.firstName.length < 5)\n      errors.firstName = \"First Name should be 5 characters long\";\n    if (!formValues.firstName) errors.firstName = \"First Name is required\";\n    if (formValues.lastName && formValues.lastName.length < 5)\n      errors.lastName = \"Last Name should be 5 characters long\";\n    if (!formValues.lastName) errors.lastName = \"Last Name is required\";\n    if (!formValues.height) errors.height = \"Height is required\";\n    if (!formValues.weight) errors.weight = \"weight is required\";\n\n    if (!formValues.mobileNumber)\n      errors.mobileNumber = \"Mobile number is required\";\n    if (\n      formValues.mobileNumber &&\n      !Validator.isDecimal(formValues.mobileNumber)\n    )\n      errors.mobileNumber = \"Only numerical values are allowed\";\n\n    return errors;\n  };\n\n  const renderError = (meta) => {\n    if (meta.touched && meta.error)\n      return <div className=\"ui pointing red basic label\">{meta.error}</div>;\n    return undefined;\n  };\n\n  return (\n    <BasicContainer>\n      <div>\n        <div>\n          <Form onSubmit={onSubmit} validate={validate}>\n            {({ handleSubmit, errors, submitting, form }) => (\n              <form className=\"ui form\" onSubmit={handleSubmit}>\n                <Grid container spacing={1}>\n                  <Grid item xs>\n                    <div className=\"text-center\">\n                      <Field name=\"name\">\n                        {({ input, meta }) => (\n                          <div className=\"field\">\n                            <label>Patient's Name</label>\n                            <input\n                              type=\"text\"\n                              {...input}\n                              placeholder=\"Patient Name\"\n                            />\n                            <PointingError input={input} meta={meta} />\n                          </div>\n                        )}\n                      </Field>\n                      <div>\n                        <Field name=\"firstName\">\n                          {({ input, meta }) => (\n                            <div className=\"field\">\n                              <label>First Name</label>\n                              <input\n                                type=\"text\"\n                                {...input}\n                                placeholder=\"First Name\"\n                              />\n                              <PointingError input={input} meta={meta} />\n                            </div>\n                          )}\n                        </Field>\n                      </div>\n                      <br />\n\n                      <div>\n                        <Field name=\"lastName\">\n                          {({ input, meta }) => (\n                            <div className=\"field\">\n                              <label>Last Name</label>\n                              <input\n                                type=\"text\"\n                                {...input}\n                                placeholder=\"Last Name\"\n                              />\n                              <PointingError input={input} meta={meta} />\n                            </div>\n                          )}\n                        </Field>\n                      </div>\n                      <br />\n                      <div>\n                        <Field name=\"dob\" type=\"date\">\n                          {({ input, meta }) => (\n                            <div className=\"field\">\n                              <label>Date Of Birth</label>\n                              <input type=\"date\" {...input} />\n                            </div>\n                          )}\n                        </Field>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs>\n                    <div className=\"text-center\">\n                      <div class=\"field\">\n                        <label> Gender </label>\n                        <ButtonGroup color=\"primary\">\n                          <Button\n                            onClick={() => {\n                              setDemographicData({\n                                ...demographicData,\n                                c1: { ...demographicData.c1, 1: 1 },\n                              });\n                            }}\n                            variant={\n                              demographicData.c1[\"1\"] === 1\n                                ? \"contained\"\n                                : \"outlined\"\n                            }\n                          >\n                            Male\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              setDemographicData({\n                                ...demographicData,\n                                c1: { ...demographicData.c1, 1: 2 },\n                              });\n                            }}\n                            variant={\n                              demographicData.c1[\"1\"] === 2\n                                ? \"contained\"\n                                : \"outlined\"\n                            }\n                          >\n                            Female\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              setDemographicData({\n                                ...demographicData,\n                                c1: { ...demographicData.c1, 1: 3 },\n                              });\n                            }}\n                            variant={\n                              demographicData.c1[\"1\"] === 3\n                                ? \"contained\"\n                                : \"outlined\"\n                            }\n                          >\n                            Others\n                          </Button>\n                        </ButtonGroup>\n                      </div>\n\n                      <div class=\"field\">\n                        <label> Patient Type </label>\n                        <ButtonGroup color=\"primary\">\n                          <Button\n                            onClick={() => {\n                              setDemographicData({\n                                ...demographicData,\n                                c2: { ...demographicData.c2, 1: 1 },\n                              });\n                            }}\n                            variant={\n                              demographicData.c2[\"1\"] === 1\n                                ? \"contained\"\n                                : \"outlined\"\n                            }\n                          >\n                            OPD Patient\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              setDemographicData({\n                                ...demographicData,\n                                c2: { ...demographicData.c2, 1: 2 },\n                              });\n                            }}\n                            variant={\n                              demographicData.c2[\"1\"] === 2\n                                ? \"contained\"\n                                : \"outlined\"\n                            }\n                          >\n                            IPD Patient\n                          </Button>\n                        </ButtonGroup>\n                      </div>\n                      <br />\n                      <div>\n                        <Field name=\"height\">\n                          {({ input, meta }) => (\n                            <div className=\"field\">\n                              <label>Height</label>\n                              <input\n                                type=\"text\"\n                                {...input}\n                                placeholder=\"Height\"\n                              />\n                              <PointingError input={input} meta={meta} />\n                            </div>\n                          )}\n                        </Field>\n                      </div>\n                      <br />\n                      <div>\n                        <Field name=\"weight\">\n                          {({ input, meta }) => (\n                            <div className=\"field\">\n                              <label>Weight</label>\n                              <input\n                                type=\"text\"\n                                {...input}\n                                placeholder=\"Weight\"\n                              />\n                              <PointingError input={input} meta={meta} />\n                            </div>\n                          )}\n                        </Field>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs>\n                    <div className=\"text-center\">\n                      <Field name=\"bmi\">\n                        {({ input, meta }) => (\n                          <div className=\"field\">\n                            <label>BMI</label>\n                            <input type=\"text\" {...input} placeholder=\"BMI\" />\n                            <PointingError input={input} meta={meta} />\n                          </div>\n                        )}\n                      </Field>\n\n                      <Field name=\"mobileNumber\">\n                        {({ input, meta }) => (\n                          <div className=\"field\">\n                            <label>Mobile Number</label>\n                            <input\n                              type=\"text\"\n                              {...input}\n                              placeholder=\"Mobile Number\"\n                            />\n                            <PointingError input={input} meta={meta} />\n                          </div>\n                        )}\n                      </Field>\n\n                      <div>\n                        <Field name=\"clinicalReferenceNumber\">\n                          {({ input, meta }) => (\n                            <div className=\"field\">\n                              <label>Clinical Reference Number</label>\n                              <textarea rows={6} {...input} />\n                              <PointingError input={input} meta={meta} />\n                            </div>\n                          )}\n                        </Field>\n                      </div>\n                      <br />\n                      <br />\n                      <br />\n                      <br />\n                      <br />\n                      <div style={{ textAlign: \"center\" }}>\n                        <button\n                          // disabled={!_.isEmpty(errors) || submitting}\n                          className=\"ui primary button\"\n                        >\n                          Save\n                        </button>\n                        <button\n                          // disabled={!_.isEmpty(errors) || submitting}\n                          className=\"ui button\"\n                          type=\"reset\"\n                          onClick={form.reset}\n                        >\n                          Discard\n                        </button>\n                      </div>\n                    </div>\n                  </Grid>\n                </Grid>\n              </form>\n            )}\n          </Form>\n        </div>\n      </div>\n    </BasicContainer>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    demographicData: state.demographicData,\n  };\n};\n\nexport default connect(mapStateToProps, { addDemograpicData })(DemographicData);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\History.jsx",["484","485","486","487"],"import React from \"react\";\nimport { Grid, FormControlLabel, Radio } from \"@material-ui/core\";\nimport { Form, Field } from \"react-final-form\";\nimport { TextareaAutosize } from \"@material-ui/core\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\nimport BasicContainer from \"../../Container/BasicContainer\";\nimport PointingError from \"../../LandingPage/ErrorComponent/PointingError\";\n\nfunction History() {\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n\n  const [historyData, setHistoryData] = React.useState({\n    t1: {},\n    t2: {},\n    t3: {},\n  });\n\n  const initialValues = { date: new Date().toISOString().substr(0, 10) };\n\n  const validate = (formValues) => {\n    const errors = {};\n    // email\n\n    // if (formValues.name && formValues.name.length < 5)\n    //   errors.name = \"Name should be 5 characters long\";\n    // if (!formValues.name) errors.name = \"Patient Name is required\";\n    // if (formValues.firstName && formValues.firstName.length < 5)\n    //   errors.firstName = \"First Name should be 5 characters long\";\n    // if (!formValues.firstName) errors.firstName = \"First Name is required\";\n    // if (formValues.lastName && formValues.lastName.length < 5)\n    //   errors.lastName = \"Last Name should be 5 characters long\";\n    // if (!formValues.lastName) errors.lastName = \"Last Name is required\";\n    // if (!formValues.height) errors.height = \"Height is required\";\n    // if (!formValues.weight) errors.weight = \"weight is required\";\n\n    // if (!formValues.mobileNumber)\n    //   errors.mobileNumber = \"Mobile number is required\";\n    // if (\n    //   formValues.mobileNumber &&\n    //   !Validator.isDecimal(formValues.mobileNumber)\n    // )\n    //   errors.mobileNumber = \"Only numerical values are allowed\";\n\n    // return errors;\n  };\n\n  return (\n    <BasicContainer>\n      <Form\n        onSubmit={onSubmit}\n        validate={validate}\n        initialValues={initialValues}\n      >\n        {({ handleSubmit }, form) => (\n          <form onSubmit={handleSubmit} className=\"ui form\">\n            <Grid container spacing={10}>\n              <Grid item xs={6}>\n                <div className=\"text-center\">\n                  <div className=\"item\">\n                    <label>Date</label>\n                    <Field name=\"date\">\n                      {({ input, meta }) => <input type=\"date\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <br />\n                  <br />\n                  <br />\n                  <br />\n                  <div className=\"item\">\n                    <label> Present Medical History </label>\n                    <Field name=\"presentHistory\">\n                      {({ input, meta }) => (\n                        <TextareaAutosize\n                          type=\"text\"\n                          placeholder=\"Present Medical History\"\n                          {...input}\n                        />\n                      )}\n                    </Field>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs=\"6\">\n                <div className=\"text-center\">\n                  <div className=\"item\">\n                    <label> Past Medical History </label>\n                    <Field name=\"pastHistory\">\n                      {({ input, meta }) => (\n                        <TextareaAutosize\n                          type=\"text\"\n                          {...input}\n                          placeholder=\"Surgical History\"\n                        />\n                      )}\n                    </Field>\n                  </div>\n\n                  <br />\n\n                  <div className=\"item\">\n                    <label> Other Disease </label>\n                    <Field name=\"pastHistory\">\n                      {({ input, meta }) => (\n                        <TextareaAutosize\n                          type=\"text\"\n                          {...input}\n                          placeholder=\"Other Disease\"\n                        />\n                      )}\n                    </Field>\n                  </div>\n\n                  <br />\n                </div>\n              </Grid>\n            </Grid>\n            <br />\n            <br />\n            <br />\n            <div>\n              <table className=\"ui very basic table\">\n                <thead></thead>\n                <tbody>\n                  <tr>\n                    <td>\n                      Diabetes\n                      <br />\n                      <br />\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t1: { ...historyData.t1, 1: 1 },\n                            });\n                          }}\n                          variant={\n                            historyData.t1[\"1\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t1: { ...historyData.t1, 1: 2 },\n                            });\n                          }}\n                          variant={\n                            historyData.t1[\"1\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No\n                        </Button>\n                      </ButtonGroup>\n                    </td>\n                    <td>\n                      Smoking\n                      <br />\n                      <br />\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t1: { ...historyData.t1, 2: 1 },\n                            });\n                          }}\n                          variant={\n                            historyData.t1[\"2\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t1: { ...historyData.t1, 2: 2 },\n                            });\n                          }}\n                          variant={\n                            historyData.t1[\"2\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No\n                        </Button>\n                      </ButtonGroup>\n                    </td>\n                    <td>\n                      Tuberculosis\n                      <br />\n                      <br />\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t1: { ...historyData.t1, 3: 1 },\n                            });\n                          }}\n                          variant={\n                            historyData.t1[\"3\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t1: { ...historyData.t1, 3: 2 },\n                            });\n                          }}\n                          variant={\n                            historyData.t1[\"3\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No\n                        </Button>\n                      </ButtonGroup>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      Blood Pressure\n                      <br />\n                      <br />\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t2: { ...historyData.t2, 1: 1 },\n                            });\n                          }}\n                          variant={\n                            historyData.t2[\"1\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t2: { ...historyData.t2, 1: 2 },\n                            });\n                          }}\n                          variant={\n                            historyData.t2[\"1\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No\n                        </Button>\n                      </ButtonGroup>\n                    </td>\n                    <td>\n                      Alcohol\n                      <br />\n                      <br />\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t2: { ...historyData.t2, 2: 1 },\n                            });\n                          }}\n                          variant={\n                            historyData.t2[\"2\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t2: { ...historyData.t2, 2: 2 },\n                            });\n                          }}\n                          variant={\n                            historyData.t2[\"2\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No\n                        </Button>\n                      </ButtonGroup>\n                    </td>\n                    <td>\n                      Cancer\n                      <br />\n                      <br />\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t2: { ...historyData.t2, 3: 1 },\n                            });\n                          }}\n                          variant={\n                            historyData.t2[\"3\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t2: { ...historyData.t2, 3: 2 },\n                            });\n                          }}\n                          variant={\n                            historyData.t2[\"3\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No\n                        </Button>\n                      </ButtonGroup>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      Hypertension\n                      <br />\n                      <br />\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t3: { ...historyData.t3, 1: 1 },\n                            });\n                          }}\n                          variant={\n                            historyData.t3[\"1\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t3: { ...historyData.t3, 1: 2 },\n                            });\n                          }}\n                          variant={\n                            historyData.t3[\"1\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No\n                        </Button>\n                      </ButtonGroup>\n                    </td>\n                    <td>\n                      Heart Disease\n                      <br />\n                      <br />\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t3: { ...historyData.t3, 2: 1 },\n                            });\n                          }}\n                          variant={\n                            historyData.t3[\"2\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t3: { ...historyData.t3, 2: 2 },\n                            });\n                          }}\n                          variant={\n                            historyData.t3[\"2\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No\n                        </Button>\n                      </ButtonGroup>\n                    </td>\n                    <td>\n                      Pregnancy\n                      <br />\n                      <br />\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t3: { ...historyData.t3, 3: 1 },\n                            });\n                          }}\n                          variant={\n                            historyData.t3[\"3\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setHistoryData({\n                              ...historyData,\n                              t3: { ...historyData.t3, 3: 2 },\n                            });\n                          }}\n                          variant={\n                            historyData.t3[\"3\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No\n                        </Button>\n                      </ButtonGroup>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <br />\n              <br />\n              <div style={{ textAlign: \"center\" }}>\n                <button\n                  // disabled={!_.isEmpty(errors) || submitting}\n                  className=\"ui primary button\"\n                >\n                  Save\n                </button>\n                <button\n                  // disabled={!_.isEmpty(errors) || submitting}\n                  className=\"ui button\"\n                  type=\"reset\"\n                  // onClick={form.reset}\n                >\n                  Discard\n                </button>\n              </div>\n            </div>\n          </form>\n        )}\n      </Form>\n    </BasicContainer>\n  );\n}\n\nexport default History;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Sensory.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Examination.jsx",["488","489"],"import React from \"react\";\nimport { Grid, FormControlLabel, Radio } from \"@material-ui/core\";\nimport { Form, Field } from \"react-final-form\";\nimport BasicContainer from \"../../Container/BasicContainer\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nfunction Examination() {\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n\n  const [examinationData, setExaminationData] = React.useState({\n    c1: {},\n  });\n\n  const initialValues = { date: new Date().toISOString().substr(0, 10) };\n\n  return (\n    <BasicContainer>\n      <Form onSubmit={onSubmit} initialValues={initialValues}>\n        {({ handleSubmit, form }) => (\n          <form onSubmit={handleSubmit} className=\"ui form\">\n            <Grid container spacing={1}>\n              <Grid item xs>\n                <div className=\"text-center\">\n                  <div className=\"item\">\n                    <label>Date</label>\n                    <Field name=\"date\">\n                      {({ input, meta }) => <input type=\"date\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <div className=\"item\">\n                    <label>Heart Rate</label>\n                    <Field name=\"heartRate\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <div className=\"item\">\n                    <label>Built of the patient</label>\n                    <div className=\"item\">\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setExaminationData({\n                              ...examinationData,\n                              c1: { ...examinationData.c1, 1: 1 },\n                            });\n                          }}\n                          variant={\n                            examinationData.c1[\"1\"] === 1\n                              ? \"contained\"\n                              : \"outlined\"\n                          }\n                        >\n                          Ectomorph\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setExaminationData({\n                              ...examinationData,\n                              c1: { ...examinationData.c1, 1: 2 },\n                            });\n                          }}\n                          variant={\n                            examinationData.c1[\"1\"] === 2\n                              ? \"contained\"\n                              : \"outlined\"\n                          }\n                        >\n                          Mesomorph\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setExaminationData({\n                              ...examinationData,\n                              c1: { ...examinationData.c1, 1: 3 },\n                            });\n                          }}\n                          variant={\n                            examinationData.c1[\"1\"] === 3\n                              ? \"contained\"\n                              : \"outlined\"\n                          }\n                        >\n                          Endomorph\n                        </Button>\n                      </ButtonGroup>\n                    </div>\n                  </div>\n                  <br />\n                  <div className=\"item\">\n                    <label>Description</label>\n                    <Field name=\"description\">\n                      {({ input, meta }) => <textarea type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                </div>\n              </Grid>\n              <Grid item xs>\n                <div className=\"text-center\">\n                  <div className=\"item\">\n                    <label>Blood Pressure</label>\n                    <Field name=\"bloodPressure\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <div className=\"item\">\n                    <label>Respiratory Rate </label>\n                    <Field name=\"respiratoryRate\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <br />\n                  <br />\n                  <br />\n                  <br />\n                  <div className=\"item\">\n                    <label> Posture </label>\n                    <Field name=\"posture\">\n                      {({ input, meta }) => <textArea type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs>\n                <div className=\"text-center\">\n                  <div className=\"item\">\n                    <label> Temperature </label>\n                    <Field name=\"temperature\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <div className=\"item\">\n                    <label> Gait </label>\n                    <Field name=\"gait\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <br />\n                  <br />\n                  <br />\n                  <br />\n                  <div className=\"item\">\n                    <label> Scar Type </label>\n                    <Field name=\"scarType\">\n                      {({ input, meta }) => <textArea type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                </div>\n              </Grid>\n            </Grid>\n            <br />\n            <br />\n            <div style={{ textAlign: \"center\" }}>\n              <button\n                // disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui primary button\"\n              >\n                Save\n              </button>\n              <button\n                // disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui button\"\n                type=\"reset\"\n                // onClick={form.reset}\n              >\n                Discard\n              </button>\n            </div>\n          </form>\n        )}\n      </Form>\n    </BasicContainer>\n  );\n}\n\nexport default Examination;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\ProgramBuilder.jsx",["490","491","492","493"],"import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\n// I have download this library. - Ayush Garg\nimport { Segment } from 'semantic-ui-react';\nimport BasicContainer from \"../../Container/BasicContainer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { FormControl, Select, MenuItem, InputLabel } from \"@material-ui/core\";\nimport { Form, Field } from \"react-final-form\";\nimport ExerciseCards from \"./ExerciseCards\";\nimport { connect } from \"react-redux\";\nimport { getExerciseById, getExercises } from \"../../../actions/exerciseAction\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 200,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(0),\n    minWidth: 200,\n    minHeight: 10,\n    margin: theme.spacing(2),\n  },\n  input: {\n    marginTop: theme.spacing(-2),\n    fontSize: 18,\n  },\n}));\n\nfunction ProgramBuilder(props) {\n  React.useEffect(() => {\n    props.getExercises();\n  }, []);\n\n  const classes = useStyles();\n\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n\n  const categories = [\n    \"JAW\",\n    \"CERVICAL\",\n    \"SHOULDER\",\n    \"ELBOW\",\n    \"HAND & WRIST\",\n    \"THORACIC SPINE\",\n    \"LUMBAR\",\n    \"HIP JOINT\",\n    \"KNEE JOINT\",\n    \"FOOT & ANKLE\",\n  ];\n\n  // const categoryData = [\n  //   {\n  //    category : \"Jaw\",\n  //    name : \"TMJ Protrusion/Retrusion\",\n  //    description : \"Sit Upright in the Chair, Push Your Jaw Forward and Backward as far as you can.\",\n  //    image : \"\"\n\n  //   }\n  // ];\n\n  const [category, setCategory] = React.useState(\"\");\n\n  return (\n    <div>\n      <Form onSubmit={onSubmit}>\n        {({ handleSubmit }, form) => (\n          <form onSubmit={handleSubmit} className=\"ui form\">\n            <Grid container spacing={1}>\n              <Grid xs={8}>\n                <div class=\"ui fluid action input\">\n                  <input type=\"text\" placeholder=\"Search...\" />\n                  <button class=\"ui button\">Search</button>\n                </div>\n              </Grid>\n              <Grid xs={4}>\n                <div className=\"item\">\n                  <FormControl variant=\"outlined\">\n                    <InputLabel className={classes.input}>Category</InputLabel>\n                    <Field name=\"category\" type=\"select\">\n                      {({ input, meta }) => (\n                        <Select\n                          // id=\"category\"\n                          className={classes.selectEmpty}\n                          {...input}\n                        // onChange={handleChange}\n                        >\n                          {categories.map((c) => (\n                            <MenuItem\n                              key={c}\n                              value={c}\n                              onClick={() => {\n                                setCategory(c);\n                              }}\n                            >\n                              {c}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      )}\n                    </Field>\n                  </FormControl>\n                </div>\n              </Grid>\n            </Grid>\n            <br />\n            <br />\n            <br />\n            <Grid container spacing={1}>\n              <Grid xs={8} style={{'marginRight' : '8rem'}}>\n              <Grid container spacing={1}>\n              {props.exercises.map((exercise) => {\n                return (\n                  <Grid xs={6}>\n                    <ExerciseCards exercise={exercise} key={exercise._id} />\n                  </Grid>\n                );\n              })}\n              {props.exercises.length}\n              </Grid>\n              </Grid>\n              <Grid xs={3}>\n              <Grid container spacing={1}>\n                <Grid xs={10}>\n                <Segment>Reps  - formValues.reps  <br></br>\n                        Hold Time -  formValues.holdTime  <br></br>\n                        Weight-  formValues.weight  <br></br>\n                        Theraband -  formValues.theraband  <br></br>\n                        Sets - formValues.sets <br></br>\n                        Hold Time -  formValues.holdTime  <br></br>\n                </Segment>\n                </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <br />\n            <br />\n            <br />\n          </form>\n        )}\n      </Form>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    exercises: state.exercises,\n  };\n};\n\nexport default connect(mapStateToProps, { getExercises })(ProgramBuilder);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\ExercisePrescription.jsx",["494","495","496","497","498","499"],"import React from \"react\";\nimport BasicContainer from \"../../Container/BasicContainer\";\nimport { Form, Field } from \"react-final-form\";\nimport { Grid } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport AppointmentTable from \"../../Tables/AppointmentTable\";\nimport { TextareaAutosize } from \"@material-ui/core\";\nimport ProgramBuilder from \"./ProgramBuilder\";\nimport { Link } from \"react-router-dom\";\n\nfunction ExercisePrescription() {\n  const onSubmit = (formValues) => {\n    const formData = {\n      ...formValues,\n    };\n  };\n  const treatmentProtocolHeading = [\n    { id: \"date\", label: \"Date\" },\n    { id: \"treatment\", label: \"Treatment\" },\n    { id: \"quantity\", label: \"Quantity\" },\n    { id: \"price\", label: \"Price\" },\n    { id: \"consultant\", label: \"Consultant\" },\n    { id: \"action\", label: \"Action\" },\n  ];\n\n  let tableData = [];\n\n  const [open, setOpen] = React.useState(false);\n\n  // const handleOpen = () => {\n  //   setOpen(() => {\n  //     return (\n  //       <div>\n  //         <ProgramBuilder />\n  //       </div>\n  //     );\n  //   });\n  // };\n\n  const renderTable = () => {\n    return (\n      <AppointmentTable headings={treatmentProtocolHeading} rows={tableData} />\n    );\n  };\n\n  return (\n    <BasicContainer>\n      <Form onSubmit={onSubmit}>\n        {({ handleSubmit, form }) => (\n          <form onSubmit={handleSubmit} className=\"ui form\">\n            <Grid container spacing={1}>\n              <Grid item xs>\n                <div className=\"text-center\">\n                  <Field name=\"name\">\n                    {({ input, meta }) => (\n                      <div className=\"field\">\n                        <label>Patient's Name</label>\n                        <input\n                          type=\"text\"\n                          {...input}\n                          placeholder=\"Patient Name\"\n                        />\n                        {/* <PointingError input={input} meta={meta} /> */}\n                      </div>\n                    )}\n                  </Field>\n                  <div>\n                    <Field name=\"age\">\n                      {({ input, meta }) => (\n                        <div className=\"field\">\n                          <label>Age</label>\n                          <input type=\"text\" {...input} placeholder=\"Age\" />\n                          {/* <PointingError input={input} meta={meta} /> */}\n                        </div>\n                      )}\n                    </Field>\n                  </div>\n                  <br />\n\n                  <div>\n                    <Field name=\"diagnosis\">\n                      {({ input, meta }) => (\n                        <div className=\"field\">\n                          <label>Diagnosis</label>\n                          <input\n                            type=\"text\"\n                            {...input}\n                            placeholder=\"Diagnosis\"\n                          />\n                          {/* <PointingError input={input} meta={meta} /> */}\n                        </div>\n                      )}\n                    </Field>\n                  </div>\n                  <br />\n                </div>\n              </Grid>\n              <Grid item xs>\n                <div className=\"text-center\">\n                  <div>\n                    <Field name=\"number\">\n                      {({ input, meta }) => (\n                        <div className=\"field\">\n                          <label>Contact Number</label>\n                          <input\n                            type=\"text\"\n                            {...input}\n                            placeholder=\"Contact Number\"\n                          />\n                          {/* <PointingError input={input} meta={meta} /> */}\n                        </div>\n                      )}\n                    </Field>\n                  </div>\n                  <br />\n                  <div>\n                    <Field name=\"email\">\n                      {({ input, meta }) => (\n                        <div className=\"field\">\n                          <label>Email</label>\n                          <input type=\"text\" {...input} placeholder=\"Email\" />\n                          {/* <PointingError input={input} meta={meta} /> */}\n                        </div>\n                      )}\n                    </Field>\n                  </div>\n                  <br />\n                  <div>\n                    <Field name=\"consultant\">\n                      {({ input, meta }) => (\n                        <div className=\"field\">\n                          <label>Consultant</label>\n                          <input\n                            type=\"text\"\n                            {...input}\n                            placeholder=\"Consultant\"\n                          />\n                          {/* <PointingError input={input} meta={meta} /> */}\n                        </div>\n                      )}\n                    </Field>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs>\n                <div className=\"text-center\">\n                  <Field name=\"patient_id\">\n                    {({ input, meta }) => (\n                      <div className=\"field\">\n                        <label>Patient Id</label>\n                        <input\n                          type=\"text\"\n                          {...input}\n                          placeholder=\"Patient Id\"\n                        />\n                        {/* <PointingError input={input} meta={meta} /> */}\n                      </div>\n                    )}\n                  </Field>\n\n                  <br />\n                  <br />\n\n                  <div style={{ textAlign: \"center\" }}>\n                    <button\n                      // disabled={!_.isEmpty(errors) || submitting}\n                      className=\"ui primary button\"\n                    >\n                      Show Details\n                    </button>\n                  </div>\n                  <br />\n                  <br />\n                  <div style={{ textAlign: \"center\" }}>\n                    <Link to=\"/programBuilder\">\n                      <button\n                        // disabled={!_.isEmpty(errors) || submitting}\n                        className=\"ui primary button\"\n                      >\n                        Create Exercise Program\n                      </button>\n                    </Link>\n                  </div>\n                </div>\n              </Grid>\n            </Grid>\n            <br />\n            <br />\n            <br />\n            <Grid xs={12}>\n              <div className={Field}>\n                <Field name=\"prognosis\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Prognosis :</label>\n                      <input type=\"text\" {...input} placeholder=\"Prognosis\" />\n                      {/* <PointingError input={input} meta={meta} /> */}\n                    </div>\n                  )}\n                </Field>\n              </div>\n            </Grid>\n            <br />\n            <br />\n            <br />\n            <Grid xs={12}>\n              <div>\n                <label>Session History :</label>\n                {renderTable()}\n              </div>\n            </Grid>\n            <Grid xs={12}>\n              <div className={Field}>{/* Assigned Program list */}</div>\n            </Grid>\n            <br />\n            <br />\n            <br />\n\n            <Grid xs={12}>\n              <div className=\"item\">\n                <label> Notes</label>\n                <Field name=\"notes\">\n                  {({ input, meta }) => (\n                    <TextareaAutosize\n                      type=\"text\"\n                      placeholder=\"Notes\"\n                      {...input}\n                    />\n                  )}\n                </Field>\n              </div>\n            </Grid>\n            <br />\n            <br />\n            <div style={{ textAlign: \"center\" }}>\n              <button\n                // disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui primary button\"\n              >\n                Save\n              </button>\n              {/* <button\n                // disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui button\"\n              >\n                Discard\n              </button> */}\n            </div>\n            <br />\n            <br />\n          </form>\n        )}\n      </Form>\n    </BasicContainer>\n  );\n}\n\nexport default ExercisePrescription;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\Exercise.jsx",["500","501"],"import React from \"react\";\nimport { Grid, ButtonBase, Typography, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport BasicContainer from \"../../Container/BasicContainer\";\nimport img from \"../../../assets/topbar.jpg\";\nimport ExerciseForm from \"../Exercise_Prescription/ExerciseForm\";\nimport { connect } from \"react-redux\";\nimport { addExercise } from \"../../../actions/exerciseAction\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: \"auto\",\n    maxWidth: 500,\n  },\n  image: {\n    width: 256,\n    height: 256,\n  },\n  img: {\n    margin: \"auto\",\n    display: \"block\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n  },\n}));\n\nconst Exercise = (props) => {\n  const classes = useStyles();\n  return (\n    <BasicContainer>\n      <Grid container spacing={2}>\n        <Grid item>\n          <Typography gutterBottom variant=\"subtitle1\">\n            Exercise Name\n          </Typography>\n          <ButtonBase className={classes.image}>\n            <img className={classes.img} alt=\"complex\" src={img} />\n          </ButtonBase>\n        </Grid>\n        <Grid item xs={12} sm container>\n          <Grid item xs container direction=\"column\" spacing={2}>\n            <ExerciseForm />\n          </Grid>\n          <Grid item>\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                props.addExercise({ ...props.exercise, test: \"abc\" });\n              }}\n            >\n              ADD\n            </Button>\n            {/* <span>{props.match.params.id}</span> */}\n          </Grid>\n        </Grid>\n      </Grid>\n    </BasicContainer>\n  );\n};\n\nconst mapStateToProps = (state, pre) => {\n  console.log(pre, \"Pre\");\n  const ex = state.exercises.filter((exercise) => {\n    if (exercise._id == pre.match.params.id) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  console.log(pre.match.params.id, ex);\n  return {\n    exercise: state.exercises.filter((exercise) => {\n      if (exercise._id == pre.match.params.id) {\n        return true;\n      } else {\n        return false;\n      }\n    })[0],\n  };\n};\n\nexport default connect(mapStateToProps, { addExercise })(Exercise);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Pain.jsx",["502","503","504"],"import React from \"react\";\nimport { Grid, FormControlLabel, Radio } from \"@material-ui/core\";\nimport { Form, Field } from \"react-final-form\";\nimport BasicContainer from \"../../Container/BasicContainer\";\nimport { ButtonGroup, Button, Slider } from \"@material-ui/core\";\n\nfunction Pain() {\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n\n  const [painData, setPainData] = React.useState({\n    c1: {},\n    c2: {},\n    c3: {},\n    c4: {}\n  });\n\n  const initialValues = { date: new Date().toISOString().substr(0, 10) };\n\n  return (\n      <Form onSubmit={onSubmit} initialValues={initialValues}>\n        {({ handleSubmit, form }) => (\n          <form onSubmit={handleSubmit} className=\"ui form\">\n            <Grid container spacing={1}>\n              <Grid item xs>\n                <div className=\"text-center\">\n                  <div className=\"item\">\n                    <label>Date</label>\n                    <Field name=\"date\">\n                      {({ input, meta }) => <input type=\"date\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <div className=\"item\">\n                    <label>Pain Onset</label>\n                    <div className=\"item\">\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c1: { ...painData.c1, 1: 1 },\n                            });\n                          }}\n                          variant={\n                            painData.c1[\"1\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Gradual\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c1: { ...painData.c1, 1: 2 },\n                            });\n                          }}\n                          variant={\n                            painData.c1[\"1\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Acute\n                        </Button>\n                      </ButtonGroup>\n                    </div>\n                  </div>\n                  <br />\n                  \n                  <div className=\"item\">\n                    <label>Trigger Point</label>\n                    <Field name=\"triggerPoint\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <div className=\"item\">\n                    <label>ADLs Restricted</label>\n                    <Field name=\"adlRestricted\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                </div>\n              </Grid>\n              <Grid item xs>\n                <div className=\"text-center\">\n                  <div className=\"item\">\n                    <label>Pain Site </label>\n                    <Field name=\"painSite\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n\n                  <div className=\"item\">\n                    <label>Pain Duration</label>\n                    <div className=\"item\">\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c2: { ...painData.c2, 1: 1 },\n                            });\n                          }}\n                          variant={\n                            painData.c2[\"1\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Acute\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c2: { ...painData.c2, 1: 2 },\n                            });\n                          }}\n                          variant={\n                            painData.c2[\"1\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Sub -Acute\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c2: { ...painData.c2, 1: 3 },\n                            });\n                          }}\n                          variant={\n                            painData.c2[\"1\"] === 3 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Sub -Chronic\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c2: { ...painData.c2, 1: 4 },\n                            });\n                          }}\n                          variant={\n                            painData.c2[\"1\"] === 4 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Chronic\n                        </Button>\n                      </ButtonGroup>\n                    </div>\n                  </div>\n                  <br />\n\n                  <div className=\"item\">\n                    <label> Aggravating Factor </label>\n                    <Field name=\"aggravatingFactor\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                  <div className=\"item\">\n                    <label>Diurnal Variation</label>\n                    <div className=\"item\">\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c3: { ...painData.c3, 1: 1 },\n                            });\n                          }}\n                          variant={\n                            painData.c3[\"1\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Morning\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c3: { ...painData.c3, 1: 2 },\n                            });\n                          }}\n                          variant={\n                            painData.c3[\"1\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Afternoon\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c3: { ...painData.c3, 1: 3 },\n                            });\n                          }}\n                          variant={\n                            painData.c3[\"1\"] === 3 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Evening\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c3: { ...painData.c3, 1: 4 },\n                            });\n                          }}\n                          variant={\n                            painData.c3[\"1\"] === 4 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Night\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c3: { ...painData.c3, 1: 5 },\n                            });\n                          }}\n                          variant={\n                            painData.c3[\"1\"] === 5 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          No specific\n                        </Button>\n                      </ButtonGroup>\n                    </div>\n                  </div>\n                  <br />\n                </div>\n              </Grid>\n              <Grid item xs>\n                <div className=\"text-center\">\n                  <div className=\"item\">\n                    <label>Pain Intensity</label>\n                    <Field name=\"painIntensity\">\n                      {({ input, meta }) => (\n                        <Slider\n                        defaultValue={5}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        marks\n                        min={1}\n                        max={10}\n                      />\n                      )}\n                    </Field>\n                  </div>\n                  <br />\n                  <div className=\"item\">\n                    <label> Nature Of Pain </label>\n                    <div className=\"item\">\n                      <ButtonGroup color=\"primary\">\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c4: { ...painData.c4, 1: 1 },\n                            });\n                          }}\n                          variant={\n                            painData.c4[\"1\"] === 1 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Inflammatory \n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c4: { ...painData.c4, 1: 2 },\n                            });\n                          }}\n                          variant={\n                            painData.c4[\"1\"] === 2 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Neuropathic \n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPainData({\n                              ...painData,\n                              c4: { ...painData.c4, 1: 3 },\n                            });\n                          }}\n                          variant={\n                            painData.c4[\"1\"] === 3 ? \"contained\" : \"outlined\"\n                          }\n                        >\n                          Functional \n                        </Button>\n                      </ButtonGroup>\n                    </div>\n                  </div>\n                  <br />\n                  \n                  <div className=\"item\">\n                    <label>Relieving Factor </label>\n                    <Field name=\"relievingFactor\">\n                      {({ input, meta }) => <input type=\"text\" {...input} />}\n                    </Field>\n                  </div>\n                  <br />\n                </div>\n              </Grid>\n            </Grid>\n            <br />\n            <br />\n            <div style={{ textAlign: \"center\" }}>\n              <button\n                // disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui primary button\"\n              >\n                Save\n              </button>\n              <button\n                // disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui button\"\n                type=\"reset\"\n                // onClick={form.reset}\n              >\n                Discard\n              </button>\n            </div>\n          </form>\n        )}\n      </Form>\n  );\n}\n\nexport default Pain;\n","D:\\physiomatic\\dashboard-main\\src\\helpers\\getDataFromToken.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\userReducer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\feedbackReducer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\invoiceReducer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\treatmentReducer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\tableReducer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\exerciseReducer.jsx",["505"],"import {\n  ADD_EXERCISE,\n  GET_ALL_EXERCISES,\n  GET_EXERCISE_BY_ID,\n} from \"../actions/types\";\n\nexport const exercises = (state = [], action) => {\n  switch (action.type) {\n    case GET_ALL_EXERCISES:\n      return [...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport const selectedExercises = (state = [], action) => {\n  switch (action.type) {\n    case ADD_EXERCISE:\n      const exercises = state.map((exercise) => exercise);\n      exercises.push(action.payload);\n      return exercises;\n    // case REMOVE_EXERCISE:\n    //   return state.filter(exercise=>{\n\n    //   })\n\n    default:\n      return state;\n  }\n};\n","D:\\physiomatic\\dashboard-main\\src\\reducers\\patientReducer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\appointmentReducer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\BrandingForm.jsx",["506","507","508"],"import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Validator from 'validator';\nimport { FormControlLabel } from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\n\nfunction BrandingForm({ open }) {\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n  const validate = (formValues) => {\n    const errors = {};\n    // email\n    if(formValues.address && formValues.address.length < 5)\n    errors.address = \"Address should me minimum 5 characters long\";\n  if (!formValues.address) errors.address = \"Address is required\";\n\n      if (!formValues.state) errors.state = \"State is required\";\n\n      \n    if (formValues.zip && !Validator.isDecimal(formValues.zip))\n    errors.zip = \"Only numerical values are allowed\";\n    if (!formValues.zip) errors.zip = \"Zip or Pincode is Required\";\n     \n      if (!formValues.city) errors.city = \"City is required\";\n   \n      if (!formValues.website) errors.website = \"Website Address is required\";\n     \n      if (formValues.contact && !Validator.isEmail(formValues.contact))\n      errors.contact = \"Enter correct email\";\n      if (!formValues.contact) errors.contact = \"Contact Email Id is required\";\n\n    return errors;\n  };\n  const renderError = (meta) => {\n    if (meta.touched && meta.error)\n      return <div className=\"ui pointing red basic label\">{meta.error}</div>;\n    return undefined;\n  };\n\n\n  const [checked, setChecked] = React.useState(true);\n  const toggleCheckbox = (event) => {\n    setChecked(event.target.checked);\n  };\n  const renderForm = () => {\n    //   const getValue=(e)=>{\n    //     console.warn(e.target)\n    //  }\n    return (\n      <div>\n        <div>\n          <Form onSubmit={onSubmit} validate ={validate}>\n            {({ handleSubmit, errors, submitting, form }) => (\n              <form className=\"ui form\" onSubmit={handleSubmit}>\n                <Field name=\"logo\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <h5> Branding Settings</h5>\n                      <label>Logo</label>\n                      <input type=\"file\" {...input} placeholder=\"Item Name\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <div style={{ textAlign: \"center\" }}>\n                  <button className=\"ui primary button\" type=\"submit\">\n                    Save\n                  </button>\n                  <button   className=\"ui button\">Discard</button>\n                </div>\n                <Field name=\"address\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <h5 style={{ color: \"grey\" }}> Address Settings</h5>\n                      <label>Address </label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Address Settings\"\n                      />\n                  <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"city\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>City</label>\n                      <input type=\"text\" {...input} placeholder=\"City\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"state\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>State</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        name=\"State\"\n                        placeholder=\"State\"\n                      />\n                   <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"zip\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Zip or Pincode</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Zip Or pincode\"\n                      />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"contact\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Contact Email Id</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Contact Email Id\"\n                      />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n\n                <Field name=\"website\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Website Address</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Website Address\"\n                      />\n                   <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n\n                <Field name=\"country\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Country</label>\n                      <select id=\"country\" name=\"country\" {...input}>\n                        <option selected value=\"IN\">\n                          India\n                        </option>\n\n                        <option value=\"AF\">Afghanistan</option>\n                        <option value=\"AX\">Aland Islands</option>\n                        <option value=\"AL\">Albania</option>\n                        <option value=\"DZ\">Algeria</option>\n                        <option value=\"AS\">American Samoa</option>\n                        <option value=\"AD\">Andorra</option>\n                        <option value=\"AO\">Angola</option>\n                        <option value=\"AI\">Anguilla</option>\n                        <option value=\"AQ\">Antarctica</option>\n                        <option value=\"AG\">Antigua and Barbuda</option>\n                        <option value=\"AR\">Argentina</option>\n                        <option value=\"AM\">Armenia</option>\n                        <option value=\"AW\">Aruba</option>\n                        <option value=\"AU\">Australia</option>\n                        <option value=\"AT\">Austria</option>\n                        <option value=\"AZ\">Azerbaijan</option>\n                        <option value=\"BS\">Bahamas</option>\n                        <option value=\"BH\">Bahrain</option>\n                        <option value=\"BD\">Bangladesh</option>\n                        <option value=\"BB\">Barbados</option>\n                        <option value=\"BY\">Belarus</option>\n                        <option value=\"BE\">Belgium</option>\n                        <option value=\"BZ\">Belize</option>\n                        <option value=\"BJ\">Benin</option>\n                        <option value=\"BM\">Bermuda</option>\n                        <option value=\"BT\">Bhutan</option>\n                        <option value=\"BO\">Bolivia</option>\n                        <option value=\"BQ\">\n                          Bonaire, Sint Eustatius and Saba\n                        </option>\n                        <option value=\"BA\">Bosnia and Herzegovina</option>\n                        <option value=\"BW\">Botswana</option>\n                        <option value=\"BV\">Bouvet Island</option>\n                        <option value=\"BR\">Brazil</option>\n                        <option value=\"IO\">\n                          British Indian Ocean Territory\n                        </option>\n                        <option value=\"BN\">Brunei Darussalam</option>\n                        <option value=\"BG\">Bulgaria</option>\n                        <option value=\"BF\">Burkina Faso</option>\n                        <option value=\"BI\">Burundi</option>\n                        <option value=\"KH\">Cambodia</option>\n                        <option value=\"CM\">Cameroon</option>\n                        <option value=\"CA\">Canada</option>\n                        <option value=\"CV\">Cape Verde</option>\n                        <option value=\"KY\">Cayman Islands</option>\n                        <option value=\"CF\">Central African Republic</option>\n                        <option value=\"TD\">Chad</option>\n                        <option value=\"CL\">Chile</option>\n                        <option value=\"CN\">China</option>\n                        <option value=\"CX\">Christmas Island</option>\n                        <option value=\"CC\">Cocos (Keeling) Islands</option>\n                        <option value=\"CO\">Colombia</option>\n                        <option value=\"KM\">Comoros</option>\n                        <option value=\"CG\">Congo</option>\n                        <option value=\"CD\">\n                          Congo, the Democratic Republic of the\n                        </option>\n                        <option value=\"CK\">Cook Islands</option>\n                        <option value=\"CR\">Costa Rica</option>\n                        <option value=\"CI\">Cote D'Ivoire</option>\n                        <option value=\"HR\">Croatia</option>\n                        <option value=\"CU\">Cuba</option>\n                        <option value=\"CW\">Curacao</option>\n                        <option value=\"CY\">Cyprus</option>\n                        <option value=\"CZ\">Czech Republic</option>\n                        <option value=\"DK\">Denmark</option>\n                        <option value=\"DJ\">Djibouti</option>\n                        <option value=\"DM\">Dominica</option>\n                        <option value=\"DO\">Dominican Republic</option>\n                        <option value=\"EC\">Ecuador</option>\n                        <option value=\"EG\">Egypt</option>\n                        <option value=\"SV\">El Salvador</option>\n                        <option value=\"GQ\">Equatorial Guinea</option>\n                        <option value=\"ER\">Eritrea</option>\n                        <option value=\"EE\">Estonia</option>\n                        <option value=\"ET\">Ethiopia</option>\n                        <option value=\"FK\">Falkland Islands (Malvinas)</option>\n                        <option value=\"FO\">Faroe Islands</option>\n                        <option value=\"FJ\">Fiji</option>\n                        <option value=\"FI\">Finland</option>\n                        <option value=\"FR\">France</option>\n                        <option value=\"GF\">French Guiana</option>\n                        <option value=\"PF\">French Polynesia</option>\n                        <option value=\"TF\">French Southern Territories</option>\n                        <option value=\"GA\">Gabon</option>\n                        <option value=\"GM\">Gambia</option>\n                        <option value=\"GE\">Georgia</option>\n                        <option value=\"DE\">Germany</option>\n                        <option value=\"GH\">Ghana</option>\n                        <option value=\"GI\">Gibraltar</option>\n                        <option value=\"GR\">Greece</option>\n                        <option value=\"GL\">Greenland</option>\n                        <option value=\"GD\">Grenada</option>\n                        <option value=\"GP\">Guadeloupe</option>\n                        <option value=\"GU\">Guam</option>\n                        <option value=\"GT\">Guatemala</option>\n                        <option value=\"GG\">Guernsey</option>\n                        <option value=\"GN\">Guinea</option>\n                        <option value=\"GW\">Guinea-Bissau</option>\n                        <option value=\"GY\">Guyana</option>\n                        <option value=\"HT\">Haiti</option>\n                        <option value=\"HM\">\n                          Heard Island and Mcdonald Islands\n                        </option>\n                        <option value=\"VA\">\n                          Holy See (Vatican City State)\n                        </option>\n                        <option value=\"HN\">Honduras</option>\n                        <option value=\"HK\">Hong Kong</option>\n                        <option value=\"HU\">Hungary</option>\n                        <option value=\"IS\">Iceland</option>\n\n                        <option value=\"ID\">Indonesia</option>\n                        <option value=\"IR\">Iran, Islamic Republic of</option>\n                        <option value=\"IQ\">Iraq</option>\n                        <option value=\"IE\">Ireland</option>\n                        <option value=\"IM\">Isle of Man</option>\n                        <option value=\"IL\">Israel</option>\n                        <option value=\"IT\">Italy</option>\n                        <option value=\"JM\">Jamaica</option>\n                        <option value=\"JP\">Japan</option>\n                        <option value=\"JE\">Jersey</option>\n                        <option value=\"JO\">Jordan</option>\n                        <option value=\"KZ\">Kazakhstan</option>\n                        <option value=\"KE\">Kenya</option>\n                        <option value=\"KI\">Kiribati</option>\n                        <option value=\"KP\">\n                          Korea, Democratic People\"s Republic of\n                        </option>\n                        <option value=\"KR\">Korea, Republic of</option>\n                        <option value=\"XK\">Kosovo</option>\n                        <option value=\"KW\">Kuwait</option>\n                        <option value=\"KG\">Kyrgyzstan</option>\n                        <option value=\"LA\">\n                          Lao People's Democratic Republic\n                        </option>\n                        <option value=\"LV\">Latvia</option>\n                        <option value=\"LB\">Lebanon</option>\n                        <option value=\"LS\">Lesotho</option>\n                        <option value=\"LR\">Liberia</option>\n                        <option value=\"LY\">Libyan Arab Jamahiriya</option>\n                        <option value=\"LI\">Liechtenstein</option>\n                        <option value=\"LT\">Lithuania</option>\n                        <option value=\"LU\">Luxembourg</option>\n                        <option value=\"MO\">Macao</option>\n                        <option value=\"MK\">\n                          Macedonia, the Former Yugoslav Republic of\n                        </option>\n                        <option value=\"MG\">Madagascar</option>\n                        <option value=\"MW\">Malawi</option>\n                        <option value=\"MY\">Malaysia</option>\n                        <option value=\"MV\">Maldives</option>\n                        <option value=\"ML\">Mali</option>\n                        <option value=\"MT\">Malta</option>\n                        <option value=\"MH\">Marshall Islands</option>\n                        <option value=\"MQ\">Martinique</option>\n                        <option value=\"MR\">Mauritania</option>\n                        <option value=\"MU\">Mauritius</option>\n                        <option value=\"YT\">Mayotte</option>\n                        <option value=\"MX\">Mexico</option>\n                        <option value=\"FM\">\n                          Micronesia, Federated States of\n                        </option>\n                        <option value=\"MD\">Moldova, Republic of</option>\n                        <option value=\"MC\">Monaco</option>\n                        <option value=\"MN\">Mongolia</option>\n                        <option value=\"ME\">Montenegro</option>\n                        <option value=\"MS\">Montserrat</option>\n                        <option value=\"MA\">Morocco</option>\n                        <option value=\"MZ\">Mozambique</option>\n                        <option value=\"MM\">Myanmar</option>\n                        <option value=\"NA\">Namibia</option>\n                        <option value=\"NR\">Nauru</option>\n                        <option value=\"NP\">Nepal</option>\n                        <option value=\"NL\">Netherlands</option>\n                        <option value=\"AN\">Netherlands Antilles</option>\n                        <option value=\"NC\">New Caledonia</option>\n                        <option value=\"NZ\">New Zealand</option>\n                        <option value=\"NI\">Nicaragua</option>\n                        <option value=\"NE\">Niger</option>\n                        <option value=\"NG\">Nigeria</option>\n                        <option value=\"NU\">Niue</option>\n                        <option value=\"NF\">Norfolk Island</option>\n                        <option value=\"MP\">Northern Mariana Islands</option>\n                        <option value=\"NO\">Norway</option>\n                        <option value=\"OM\">Oman</option>\n                        <option value=\"PK\">Pakistan</option>\n                        <option value=\"PW\">Palau</option>\n                        <option value=\"PS\">\n                          Palestinian Territory, Occupied\n                        </option>\n                        <option value=\"PA\">Panama</option>\n                        <option value=\"PG\">Papua New Guinea</option>\n                        <option value=\"PY\">Paraguay</option>\n                        <option value=\"PE\">Peru</option>\n                        <option value=\"PH\">Philippines</option>\n                        <option value=\"PN\">Pitcairn</option>\n                        <option value=\"PL\">Poland</option>\n                        <option value=\"PT\">Portugal</option>\n                        <option value=\"PR\">Puerto Rico</option>\n                        <option value=\"QA\">Qatar</option>\n                        <option value=\"RE\">Reunion</option>\n                        <option value=\"RO\">Romania</option>\n                        <option value=\"RU\">Russian Federation</option>\n                        <option value=\"RW\">Rwanda</option>\n                        <option value=\"BL\">Saint Barthelemy</option>\n                        <option value=\"SH\">Saint Helena</option>\n                        <option value=\"KN\">Saint Kitts and Nevis</option>\n                        <option value=\"LC\">Saint Lucia</option>\n                        <option value=\"MF\">Saint Martin</option>\n                        <option value=\"PM\">Saint Pierre and Miquelon</option>\n                        <option value=\"VC\">\n                          Saint Vincent and the Grenadines\n                        </option>\n                        <option value=\"WS\">Samoa</option>\n                        <option value=\"SM\">San Marino</option>\n                        <option value=\"ST\">Sao Tome and Principe</option>\n                        <option value=\"SA\">Saudi Arabia</option>\n                        <option value=\"SN\">Senegal</option>\n                        <option value=\"RS\">Serbia</option>\n                        <option value=\"CS\">Serbia and Montenegro</option>\n                        <option value=\"SC\">Seychelles</option>\n                        <option value=\"SL\">Sierra Leone</option>\n                        <option value=\"SG\">Singapore</option>\n                        <option value=\"SX\">Sint Maarten</option>\n                        <option value=\"SK\">Slovakia</option>\n                        <option value=\"SI\">Slovenia</option>\n                        <option value=\"SB\">Solomon Islands</option>\n                        <option value=\"SO\">Somalia</option>\n                        <option value=\"ZA\">South Africa</option>\n                        <option value=\"GS\">\n                          South Georgia and the South Sandwich Islands\n                        </option>\n                        <option value=\"SS\">South Sudan</option>\n                        <option value=\"ES\">Spain</option>\n                        <option value=\"LK\">Sri Lanka</option>\n                        <option value=\"SD\">Sudan</option>\n                        <option value=\"SR\">Suriname</option>\n                        <option value=\"SJ\">Svalbard and Jan Mayen</option>\n                        <option value=\"SZ\">Swaziland</option>\n                        <option value=\"SE\">Sweden</option>\n                        <option value=\"CH\">Switzerland</option>\n                        <option value=\"SY\">Syrian Arab Republic</option>\n                        <option value=\"TW\">Taiwan, Province of China</option>\n                        <option value=\"TJ\">Tajikistan</option>\n                        <option value=\"TZ\">Tanzania, United Republic of</option>\n                        <option value=\"TH\">Thailand</option>\n                        <option value=\"TL\">Timor-Leste</option>\n                        <option value=\"TG\">Togo</option>\n                        <option value=\"TK\">Tokelau</option>\n                        <option value=\"TO\">Tonga</option>\n                        <option value=\"TT\">Trinidad and Tobago</option>\n                        <option value=\"TN\">Tunisia</option>\n                        <option value=\"TR\">Turkey</option>\n                        <option value=\"TM\">Turkmenistan</option>\n                        <option value=\"TC\">Turks and Caicos Islands</option>\n                        <option value=\"TV\">Tuvalu</option>\n                        <option value=\"UG\">Uganda</option>\n                        <option value=\"UA\">Ukraine</option>\n                        <option value=\"AE\">United Arab Emirates</option>\n                        <option value=\"GB\">United Kingdom</option>\n                        <option value=\"US\">United States</option>\n                        <option value=\"UM\">\n                          United States Minor Outlying Islands\n                        </option>\n                        <option value=\"UY\">Uruguay</option>\n                        <option value=\"UZ\">Uzbekistan</option>\n                        <option value=\"VU\">Vanuatu</option>\n                        <option value=\"VE\">Venezuela</option>\n                        <option value=\"VN\">Viet Nam</option>\n                        <option value=\"VG\">Virgin Islands, British</option>\n                        <option value=\"VI\">Virgin Islands, U.s.</option>\n                        <option value=\"WF\">Wallis and Futuna</option>\n                        <option value=\"EH\">Western Sahara</option>\n                        <option value=\"YE\">Yemen</option>\n                        <option value=\"ZM\">Zambia</option>\n                        <option value=\"ZW\">Zimbabwe</option>\n                      </select>\n                      {renderError(meta)}\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"removeBranding\" type=\"checkbox\">\n                  {({ input, meta }) => (\n                    <div class=\"field\">\n                      <h5>Remove Branding </h5>\n                      <FormControlLabel\n                        control={<Checkbox {...input} color=\"secondary\" />}\n                        label=\"Remove Banding\"\n                        labelPlacement=\"end\"\n                      />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"fb\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Fb URL</label>\n                      <input type=\"text\" {...input} placeholder=\"FB URL\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n\n                <Field name=\"twitter\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Twitter URL</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Twitter Url\"\n                      />\n                      {renderError(meta)}\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"youtube\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Youtube URL</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Youtube Url\"\n                      />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"pinterest\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Pinterest URL</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Pinterest ID\"\n                      />\n                     <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"linkedIn\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>LinkedIn ID</label>\n                      <input type=\"text\" {...input} placeholder=\"LinkedIn Id\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"instagram\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Instagram ID</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Instagram Id\"\n                      />\n                        <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <div style={{ textAlign: \"center\" }}>\n                  <button   className=\"ui primary button\" type=\"submit\">\n                    Save\n                  </button>\n                  <button   \n                    className=\"ui button\"\n                    type=\"reset\"\n                    onClick={form.reset}\n                  >\n                    Discard\n                  </button>\n                </div>\n              </form>\n            )}\n          </Form>\n        </div>\n      </div>\n    );\n  };\n\n  return open ? renderForm() : null;\n}\n\nexport default BrandingForm;\n","D:\\physiomatic\\dashboard-main\\src\\reducers\\SideBarReducer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\MyProfileForm.jsx",["509"],"import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport Validator from \"validator\";\nimport _ from \"lodash\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\nfunction MyProfileForm({ open }) {\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n  const validate = (formValues) => {\n    const errors = {};\n    // email\n\n    if (formValues.name && formValues.name.length < 5)\n    errors.name = \"First Name should be 5 characters long\";\n    if (!formValues.name) \n      errors.name = \"First Name is required\";\n    if (formValues.lastName && formValues.lastName.length < 5)\n      errors.lastName = \"Last Name should be 5 characters long\";\n    if (!formValues.lastName) \n      errors.lastName = \"Last Name is required\";\n      if (!formValues.clinicName) errors.clinicName = \"Clinic Name is required\";\n      if (!formValues.branchName) errors.branchName = \"Branch Name is required\";\n\n      if (formValues.email && !Validator.isEmail(formValues.email))\n      errors.email = \"Enter correct email\";\n      if (!formValues.email) errors.email = \"Email is required\";\n\n   \n     if (!formValues.mobileNumber) errors.mobileNumber = \"Mobile number is required\";\n    if (formValues.mobileNumber && !Validator.isDecimal(formValues.mobileNumber))\n    errors.mobileNumber = \"Only numerical values are allowed\";\n    if (!formValues.bankDetails) \n    errors.bankDetails = \"Bank Details are required\";\n\n    return errors;\n  };\n  const renderError = (meta) => {\n    if (meta.touched && meta.error)\n      return <div className=\"ui pointing red basic label\">{meta.error}</div>;\n    return undefined;\n  };\n\n  const renderForm = () => {\n    return (\n      <div>\n        <div>\n          <Form onSubmit={onSubmit} validate={validate}>\n            {({ handleSubmit, errors, submitting, form }) => (\n              <form className=\"ui form\" onSubmit={handleSubmit}>\n                <Field name=\"name\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>First Name</label>\n                      <input type=\"text\" {...input} placeholder=\"First Name\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"lastName\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Last Name</label>\n                      <input type=\"text\" {...input} placeholder=\"Last Name\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"branchName\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Branch Name</label>\n                      <input type=\"text\" {...input} placeholder=\"Branch Name\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"clinicName\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Clinic Name</label>\n                      <input type=\"text\" {...input} placeholder=\"Clinic Name\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"email\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Email</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Email\"\n                    \n                      />\n                        <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"mobileNumber\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Mobile Number</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Mobile Number\"\n                      />\n                    <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"phoneNumber\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Phone Number</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"Phone Number\"\n                      />\n                         <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"bankDetails\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Bank Details</label>\n                      <textarea rows=\"2\" {...input} />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <div style={{ textAlign: \"center\" }}>\n                  <button    disabled={!_.isEmpty(errors) || submitting} className=\"ui primary button\">Save</button>\n                  <button disabled={!_.isEmpty(errors) || submitting}\n                    className=\"ui button\"\n                    type=\"reset\"\n                    onClick={form.reset}\n                  >\n                    Discard\n                  </button>\n                </div>\n              </form>\n            )}\n          </Form>\n        </div>\n      </div>\n    );\n  };\n\n  return open ? renderForm() : null;\n}\n\nexport default MyProfileForm;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\ConsentForm.jsx",["510"],"import React from \"react\";\nimport CKEditor from \"react-ckeditor-component\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\nfunction ConsentForm({ open }) {\n  const editorData = localStorage.getItem(\"editorData\") || \"Type Here\";\n  const [content, setContent] = React.useState(editorData);\n\n  const onChange = (evt) => {\n    setContent(evt.editor.getData());\n  };\n\n  const onSave = () => {\n    localStorage.setItem(\"editorData\", content);\n  };\n\n  const onDiscard = () => {\n    setContent(localStorage.getItem(\"editorData\") || \"Type Here\");\n  };\n\n  const renderForm = () => {\n    return (\n      <div>\n        <CKEditor\n          activeClass=\"p10\"\n          content={content}\n          events={{\n            change: onChange,\n          }}\n        />\n        <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n          <button className=\"ui primary button\" onClick={onSave}>\n            Save\n          </button>\n          <button className=\"ui button\" onClick={onDiscard}>\n            Discard\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return open ? renderForm() : null;\n}\n\nexport default ConsentForm;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\CalenderForm.jsx",["511"],"import React from \"react\";\n\nimport { TimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\nfunction CalenderForm({ open }) {\n  const renderForm = () => {\n    return (\n      <div>\n        <div>\n          <form class=\"ui form\">\n            <div class=\"field\">\n              <label>Schedule Slot*</label>\n\n              <select class=\"form-select\" aria-label=\"Default select example\">\n                <option selected>5 min</option>\n                <option value=\"1\">15 min</option>\n                <option value=\"2\">30 min</option>\n                <option value=\"3\">45 min</option>\n                <option value=\"4\">60 min</option>\n              </select>\n            </div>\n            <div class=\"field\">\n              <label>Schedule Times*</label>\n\n              <select class=\"form-select\" aria-label=\"Default select example\">\n                <option selected>1</option>\n                <option value=\"1\">3</option>\n                <option value=\"2\">5</option>\n              </select>\n            </div>\n            <div class=\"field\">\n              <label>Display Appointments Of*</label>\n            </div>\n            <div class=\"field\">\n              <label>Days After Current Date</label>\n\n              <select class=\"form-select\" aria-label=\"Default select example\">\n                <option selected>Please Select</option>\n                <option value=\"1\">1 Day </option>\n                <option value=\"2\">2 Days</option>\n                <option value=\"3\">3 Days</option>\n                <option value=\"4\">4 Days</option>\n                <option value=\"5\">5 Days</option>\n                <option value=\"6\">6 Days</option>\n                <option value=\"7\">7 Days</option>\n                <option value=\"8\">8 Days</option>\n                <option value=\"9\">9 Days</option>\n                <option value=\"10\">10 Days</option>\n                <option value=\"11\">11 Days</option>\n                <option value=\"12\">12 Days</option>\n                <option value=\"13\">13 Days</option>\n                <option value=\"14\">14 Days</option>\n                <option value=\"15\">15 Days</option>\n                <option value=\"16\">16 Days</option>\n                <option value=\"17\">17 Days</option>\n                <option value=\"18\">18 Days</option>\n                <option value=\"19\">19 Days</option>\n                <option value=\"20\">20 Days</option>\n                <option value=\"21\">21 Days</option>\n                <option value=\"22\">22 Days</option>\n                <option value=\"23\">23 Days</option>\n                <option value=\"24\">24 Days</option>\n                <option value=\"25\">25 Days</option>\n                <option value=\"26\">26 Days</option>\n                <option value=\"27\">27 Days</option>\n                <option value=\"28\">28 Days</option>\n                <option value=\"29\">29 Days</option>\n                <option value=\"30\">30 Days</option>\n                <option value=\"31\">31 Days</option>\n              </select>\n            </div>\n            <div class=\"field\">\n              <label>Days Before Current Date</label>\n\n              <select class=\"form-select\" aria-label=\"Default select example\">\n                <option selected>Please Select</option>\n                <option value=\"1\">1 Day </option>\n                <option value=\"2\">2 Days</option>\n                <option value=\"3\">3 Days</option>\n                <option value=\"4\">4 Days</option>\n                <option value=\"5\">5 Days</option>\n                <option value=\"6\">6 Days</option>\n                <option value=\"7\">7 Days</option>\n                <option value=\"8\">8 Days</option>\n                <option value=\"9\">9 Days</option>\n                <option value=\"10\">10 Days</option>\n                <option value=\"11\">11 Days</option>\n                <option value=\"12\">12 Days</option>\n                <option value=\"13\">13 Days</option>\n                <option value=\"14\">14 Days</option>\n                <option value=\"15\">15 Days</option>\n                <option value=\"16\">16 Days</option>\n                <option value=\"17\">17 Days</option>\n                <option value=\"18\">18 Days</option>\n                <option value=\"19\">19 Days</option>\n                <option value=\"20\">20 Days</option>\n                <option value=\"21\">21 Days</option>\n                <option value=\"22\">22 Days</option>\n                <option value=\"23\">23 Days</option>\n                <option value=\"24\">24 Days</option>\n                <option value=\"25\">25 Days</option>\n                <option value=\"26\">26 Days</option>\n                <option value=\"27\">27 Days</option>\n                <option value=\"28\">28 Days</option>\n                <option value=\"29\">29 Days</option>\n                <option value=\"30\">30 Days</option>\n                <option value=\"31\">31 Days</option>\n              </select>\n            </div>\n            <div class=\"field\">\n              <label>Appointments View*</label>\n\n              <select class=\"form-select\" aria-label=\"Default select example\">\n                <option selected>Day View</option>\n                <option value=\"1\">Week View</option>\n                <option value=\"2\">Month View</option>\n              </select>\n            </div>\n            <div style={{ textAlign: \"center\" }}>\n              <button className=\"ui primary button\" onClick={onSaveTableData}>\n                Save\n              </button>\n              <button className=\"ui button\" onClick={onDiscardChanges}>\n                Discard\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  };\n\n  const handleDateChange = (isStartTime, time, index) => {\n    setState((preState) => {\n      const obj = [...preState];\n\n      if (isStartTime === 0) {\n        obj[index] = { ...obj[index], startTime: new Date(time) };\n      } else if (isStartTime === 1) {\n        obj[index] = { ...obj[index], endTime: new Date(time) };\n      } else {\n        obj[index] = { ...obj[index], breakStartTime: new Date(time) };\n      }\n      return obj;\n    });\n  };\n\n  const handleDisable = (index) => {\n    setState((curState) => {\n      const obj = [...curState];\n      obj[index].disable = !obj[index].disable;\n      return obj;\n    });\n  };\n  const addMinutes = (date, minutes) => {\n    return new Date(new Date(date).getTime() + minutes * 60000);\n  };\n\n  const timer = (isStartTime, date, index, disable) => {\n    return (\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <TimePicker\n          showTodayButton\n          todayLabel=\"now\"\n          disabled={disable}\n          label=\"Select Time\"\n          value={date}\n          minutesStep={5}\n          onChange={(time) => handleDateChange(isStartTime, time, index)}\n        />\n      </MuiPickersUtilsProvider>\n    );\n  };\n  const initialState = [\n    {\n      disable: false,\n      day: \"Monday\",\n      startTime: undefined,\n      endTime: undefined,\n      breakStartTime: undefined,\n    },\n    {\n      disable: false,\n      day: \"Tuesday\",\n      startTime: undefined,\n      endTime: undefined,\n      breakStartTime: undefined,\n    },\n    {\n      disable: false,\n      day: \"Wednesday \",\n      startTime: undefined,\n      endTime: undefined,\n      breakStartTime: undefined,\n    },\n    {\n      disable: false,\n      day: \"Thursday\",\n      startTime: undefined,\n      endTime: undefined,\n      breakStartTime: undefined,\n    },\n    {\n      disable: false,\n      day: \"Friday\",\n      startTime: undefined,\n      endTime: undefined,\n      breakStartTime: undefined,\n    },\n    {\n      disable: false,\n      day: \"Saturday\",\n      startTime: undefined,\n      endTime: undefined,\n      breakStartTime: undefined,\n    },\n    {\n      disable: false,\n      day: \"Sunday\",\n      startTime: undefined,\n      endTime: undefined,\n      breakStartTime: undefined,\n    },\n  ];\n  const tableKey = \"calenderData\";\n  const savedTableData = JSON.parse(localStorage.getItem(tableKey));\n\n  const [state, setState] = React.useState(\n    savedTableData ? savedTableData.state : initialState\n  );\n  const [duration, setDuration] = React.useState(\n    savedTableData ? savedTableData.duration : 40\n  );\n\n  const renderTable = () => {\n    return (\n      <table class=\"ui compact celled definition table\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>Day</th>\n            <th>Opening Time</th>\n            <th>Closing time</th>\n            <th>Break At</th>\n            <th>Break-Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          {state.map(\n            ({ disable, day, startTime, endTime, breakStartTime }, index) => {\n              return (\n                <tr>\n                  <td class=\"collapsing\">\n                    <div class=\"ui fitted slider checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        checked={!disable}\n                        onClick={() => {\n                          handleDisable(index);\n                        }}\n                      />\n                      <label></label>\n                    </div>\n                  </td>\n                  <td> {day}</td>\n                  <td>\n                    {timer(\n                      0,\n                      new Date(startTime || Date.now()),\n                      index,\n                      disable\n                    )}\n                  </td>\n                  <td>\n                    {timer(1, new Date(endTime || Date.now()), index, disable)}\n                  </td>\n                  <td>\n                    {timer(\n                      2,\n                      new Date(breakStartTime || Date.now()),\n                      index,\n                      disable\n                    )}\n                  </td>\n                  <td>{breakStartTime ? getRange(breakStartTime) : \"Break\"}</td>\n                </tr>\n              );\n            }\n          )}\n        </tbody>\n      </table>\n    );\n  };\n  function pad(n, width, z) {\n    z = z || \"0\";\n    n = n + \"\";\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n  }\n\n  const getRange = (date) => {\n    let h1 = \"AM\";\n    let h2 = \"AM\";\n    const from = new Date(date);\n    const to = new Date(addMinutes(from, duration));\n    let hrs1 = from.getHours();\n    if (hrs1 > 12) {\n      hrs1 = Math.floor(hrs1 - 12);\n      h1 = \"PM\";\n    }\n    const min1 = from.getMinutes();\n    let hrs2 = to.getHours();\n    if (hrs2 > 12) {\n      hrs2 = Math.floor(hrs2 - 12);\n      h2 = \"PM\";\n    }\n    const min2 = to.getMinutes();\n    if (hrs1 === 12) h1 = \"PM\";\n    if (hrs2 === 12) h2 = \"PM\";\n    return (\n      <h6>{`${pad(hrs1, 2)} :${pad(min1, 2)} ${h1} - ${pad(hrs2, 2)} :${pad(\n        min2,\n        2\n      )} ${h2} `}</h6>\n    );\n  };\n\n  const handleDurationChange = (evt) => {\n    setDuration(evt.target.value);\n  };\n\n  const onSaveTableData = () => {\n    localStorage.setItem(tableKey, JSON.stringify({ duration, state }));\n  };\n\n  const onDiscardChanges = () => {\n    setDuration(savedTableData.duration);\n    setState(savedTableData.state);\n  };\n\n  return open ? (\n    <div>\n      {renderForm()}\n      <h3 class=\"ui dividing header\">Working Day and hours</h3>\n      <div style={{ textAlign: \"right\" }}>\n        <div class=\"ui right labeled input\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter Break Duration..\"\n            onChange={handleDurationChange}\n            value={duration}\n          />\n          <div class=\"ui basic label\">Minutes</div>\n        </div>\n        {renderTable()}\n        <div style={{ textAlign: \"center\" }}>\n          <button className=\"ui primary button\" onClick={onSaveTableData}>\n            Save\n          </button>\n          <button className=\"ui button\" onClick={onDiscardChanges}>\n            Discard\n          </button>\n        </div>\n      </div>\n    </div>\n  ) : null;\n}\n\nexport default CalenderForm;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Container\\BasicContainer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\ProductForm.jsx",["512"],"import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport Validator from 'validator';\nimport _ from \"lodash\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\n\nfunction ProductForm({ open }) {\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n\n  const validate = (formValues) => {\n    const errors = {};\n    // email\n   \n    if (!formValues.name) errors.name= \"Item name  is required\";\n\n    if (formValues.itemCode && !Validator.isDecimal(formValues.itemCode))\n    errors.itemCode = \"Only numerical values are allowed\";\n    if (!formValues.itemCode) errors.itemCode = \"Item Code is required\";\n\n    if (formValues.noOfItems && !Validator.isDecimal(formValues.noOfItems))\n    errors.noOfItems = \"Only numerical values are allowed\";\n    if (!formValues.noOfItems) errors.noOfItems = \"No. of items are required\";\n\n    if (formValues.amount && !Validator.isDecimal(formValues.amount))\n    errors.amount = \"Only numerical values are allowed\";\n    if (!formValues.amount) errors.amount = \"Amount is required\";\n\n    if (formValues.discount && !Validator.isDecimal(formValues.discount))\n    errors.height = \"Only numerical values are allowed\";\n    if (!formValues.discount) errors.discount = \"Discount is required\";\n\n    if (formValues.total && !Validator.isDecimal(formValues.total))\n    errors.total = \"Only numerical values are allowed\";\n    if (!formValues.total) errors.total = \"Total is required\";\n\n   \n\n    return errors;\n  };\n  const renderError = (meta) => {\n    if (meta.touched && meta.error)\n      return <div className=\"ui pointing red basic label\">{meta.error}</div>;\n    return undefined;\n  };\n\n  \n\n  const renderForm = () => {\n    return (\n      <div>\n        <div>\n          <Form onSubmit={onSubmit} validate ={validate}>\n            {({ handleSubmit, form, errors, submitting }) => (\n              <form className=\"ui form\" onSubmit={handleSubmit}>\n                <Field name=\"name\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Item Name</label>\n                      <input type=\"text\" {...input} placeholder=\"Item Name\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"itemCode\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Item Code</label>\n                      <input type=\"text\" {...input} placeholder=\"Item Code\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"noOfItems\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>No. of Items</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        placeholder=\"No. of Items\"\n                      />\n                       <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"amount\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Amount</label>\n                      <input\n                        type=\"text\"\n                        {...input}\n                        name=\"amount\"\n                        placeholder=\"Amount\"\n                      />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"discount\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Discount</label>\n                      <input type=\"text\" {...input} placeholder=\"Discount\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"total\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Total</label>\n                      <input type=\"text\" {...input} placeholder=\"Total\" />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <div style={{ textAlign: \"center\" }}>\n                  <button disabled={!_.isEmpty(errors) || submitting} className=\"ui primary button\" type=\"submit\">\n                    Save\n                  </button>\n                  <button  disabled={!_.isEmpty(errors) || submitting}\n                    className=\"ui button\"\n                    type=\"reset\"\n                    onClick={form.reset}\n                  >\n                    Discard\n                  </button>\n                </div>\n              </form>\n            )}\n          </Form>\n        </div>\n      </div>\n    );\n  };\n\n  return open ? renderForm() : null;\n}\n\nexport default ProductForm;\n","D:\\physiomatic\\dashboard-main\\src\\components\\SideBar\\SideBar.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\ExerciseForm.jsx",["513","514","515"],"import React, { useState } from \"react\";\nimport BasicContainer from \"../../Container/BasicContainer\";\nimport { Form, Field } from 'react-final-form';\nfunction ExerciseForm() {\n\n  function handleSubmit () {\n    //do something with data\n  }\n\n  function onSubmit () {\n    //pass data in program builder\n  }\n\n  return (\n    <BasicContainer>\n      <div className=\"ui form\">\n        <div className=\"ui grid\">\n          <div class=\"six wide  column\">\n            <Form\n              onSubmit={onSubmit}\n              render={({ handleSubmit }) => (\n                <form onSubmit={handleSubmit}>\n                  <div className=\"inline field\">\n                    <label className=\"three wide column\">Reps</label>\n                    <Field name=\"Reps\" component=\"input\" placeholder=\"First Name\" type=\"number\" />\n                  </div>\n\n                  <div className=\"inline field\">\n                    <label className=\"three wide column\">Hold Time</label>\n                    <Field type=\"number\" maxlength=\"3\" placeholder=\"Hold\" component=\"input\" type=\"number\" />\n                  </div>\n                  <div className=\"inline field\">\n                    <label>Resistance</label>\n                    <Field name=\"weight\" component=\"select\">\n                      <option value=\"\">Weight</option>\n                      <option value=\"0.5\">0.5 Kg </option>\n                      <option value=\"2\">1 Kg</option>\n                      <option value=\"3\">1.5 Kg</option>\n                      <option value=\"4\">2 Kg</option>\n                      <option value=\"5\">2.5 Kg</option>\n                      <option value=\"6\">3 Kg</option>\n                      <option value=\"7\">3.5 Kg</option>\n                      <option value=\"8\">4 Kg</option>\n                    </Field>\n                    <div class=\"field\">\n                      <Field name=\"Theraband\" component=\"select\">\n                        <option value=\"\">Theraband</option>\n                        <option value=\"Yellow\">Yellow </option>\n                        <option value=\"Red\">Red</option>\n                        <option value=\"Green\">Green</option>\n                        <option value=\"Blue\">Blue</option>\n                        <option value=\"Black\">Black</option>\n                        <option value=\"Silver\">Silver</option>\n                      </Field>\n                    </div>\n                  </div>\n                  <div class=\"six wide  column\">\n                    <div className=\"inline field\">\n                      <label>Sets</label>\n                      <Field type=\"number\" maxlength=\"3\" placeholder=\"Sets\" component=\"input\" />\n                    </div>\n                    <div className=\"inline field\">\n                      <label>Hold Time</label>\n                      <Field type=\"number\" maxlength=\"3\" placeholder=\"Hold Time\" component=\"input\" />\n                    </div>\n                  </div>\n                </form>\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    </BasicContainer>\n  );\n}\n\nexport default ExerciseForm;\n","D:\\physiomatic\\dashboard-main\\src\\actions\\exerciseAction.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Exercise_Prescription\\ExerciseCards.jsx",["516","517"],"import React from \"react\";\nimport BasicContainer from \"../../Container/BasicContainer\";\nimport Exercise from \"../Exercise_Prescription/Exercise\";\nimport { Link } from \"react-router-dom\";\n\nfunction ExerciseCards(props) {\n  return (\n    <BasicContainer>\n      <div className=\"column\">\n        <div className=\"ui fluid card\">\n          <div className=\"image\">\n            <img src={props.exercise.image} />\n          </div>\n          <div className=\"content\">\n            <Link to={`/programBuilder/${props.exercise._id}`}>\n              {props.exercise.name}\n            </Link>\n          </div>\n        </div>\n      </div>\n    </BasicContainer>\n  );\n}\n\nexport default ExerciseCards;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\CaseReportForm.jsx",["518","519"],"import React from \"react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Form, Field } from \"react-final-form\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\nconst columns = [\n  { field: \"id\", headerName: \"ID\", width: 70 },\n  { field: \"firstName\", headerName: \"First name\", width: 130 },\n  { field: \"lastName\", headerName: \"Last name\", width: 130 },\n  {\n    field: \"age\",\n    headerName: \"Age\",\n    type: \"number\",\n    width: 90,\n  },\n  {\n    field: \"fullName\",\n    headerName: \"Full name\",\n    description: \"This column has a value getter and is not sortable.\",\n    sortable: false,\n    width: 160,\n    valueGetter: (params) =>\n      `${params.getValue(\"firstName\") || \"\"} ${\n        params.getValue(\"lastName\") || \"\"\n      }`,\n  },\n];\n\nconst rows = [\n  { id: 1, lastName: \"Snow\", firstName: \"Jon\", age: 35 },\n  { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\n  { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\n  { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\n  { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null },\n  { id: 6, lastName: \"Melisandre\", firstName: null, age: 150 },\n  { id: 7, lastName: \"Clifford\", firstName: \"Ferrara\", age: 44 },\n  { id: 8, lastName: \"Frances\", firstName: \"Rossini\", age: 36 },\n  { id: 9, lastName: \"Roxie\", firstName: \"Harvey\", age: 65 },\n];\n\nfunction ConsentForm({ open }) {\n  const test = () => (\n    <div style={{ height: 400, width: \"100%\" }}>\n      <DataGrid rows={rows} columns={columns} pageSize={5} checkboxSelection />\n    </div>\n  );\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n\n  const renderForm = () => {\n    return (\n      <div>\n        <div>\n          <Form onSubmit={onSubmit}>\n            {({ handleSubmit, form }) => (\n              <form onSubmit={handleSubmit}>\n                <div className=\"ui form\">\n                  <style\n                    dangerouslySetInnerHTML={{\n                      __html:\n                        \"\\ntable {\\n  font-family: arial, sans-serif;\\n  border-collapse: collapse;\\n  width: 100%;\\n}\\n\\ntd, th {\\n  border: 1px solid #dddddd;\\n  text-align: left;\\n  padding: 8px;\\n}\\n\\ntr:nth-child(even) {\\n  background-color: #dddddd;\\n}\\n\",\n                    }}\n                  />\n                  <h3>Select Below For Case Report Print Out </h3>\n                  <table>\n                    <tbody>\n                      <tr>\n                        <th>Assessments</th>\n                        <th>Option</th>\n                      </tr>\n                      <tr>\n                        <td>Subjective</td>\n                        <td>\n                          <Field name=\"subjective\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                             \n                            )}\n                         \n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Objective</td>\n                        <td>\n                          <Field name=\"objectives\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Assessment</td>\n                        <td>\n                          <Field name=\"assessment\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Plan</td>\n                        <td>\n                          <Field name=\"plan\">\n                            {({ input, meta }) => (\n                              <Checkbox\n                                color=\"secondary\"\n                                {...input}\n                                type=\"checkbox\"\n                              />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>History</td>\n                        <td>\n                          <Field name=\"history\">\n                            {({ input, meta }) => (\n                              <Checkbox\n                                color=\"secondary\"\n                                {...input}\n                                type=\"checkbox\"\n                              />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Chief Complaints</td>\n                        <td>\n                          <Field name=\"chiefComplaints\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Pain</td>\n                        <td>\n                          <Field name=\"pain\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Body Chart</td>\n                        <td>\n                          <Field name=\"bodyChart\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Examination</td>\n                        <td>\n                          <Field name=\"examination\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Motor Examination</td>\n                        <td>\n                          <Field name=\"motorExamination\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Sensory Examination</td>\n                        <td>\n                          <Field name=\"sensoryExamination\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Pediatric Examination</td>\n                        <td>\n                          <Field name=\"pediatricExamination\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"Primary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Neuro Examination</td>\n                        <td>\n                          <Field name=\"neuroExamination\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Investigation</td>\n                        <td>\n                          <Field name=\"investigation\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Provisional Diagnosis</td>\n                        <td>\n                          <Field name=\"provisionalDiagnosis\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Medical Diagnosis</td>\n                        <td>\n                          <Field name=\"medicalDiagnosis\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Goals</td>\n                        <td>\n                          <Field name=\"goals\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Treatment Protocols</td>\n                        <td>\n                          <Field name=\"treatmentDetails\" type=\"checkbox\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Treatment Encounter</td>\n                        <td>\n                          <Field name=\"treatmentEncounter\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Exercise Prescription</td>\n                        <td>\n                          <Field name=\"exercisePrescription\">\n                            {({ input, meta }) => (\n                              <Checkbox color=\"secondary\" {...input} />\n                            )}\n                          </Field>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n\n                <div style={{ textAlign: \"center\" }}>\n                  <button className=\"ui primary button\">Save</button>\n                  <button\n                    className=\"ui button\"\n                    type=\"reset\"\n                    onClick={form.reset}\n                  >\n                    Discard\n                  </button>\n                </div>\n              </form>\n            )}\n          </Form>\n        </div>\n      </div>\n    );\n  };\n\n  return open ? renderForm() : null;\n}\n\nexport default ConsentForm;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\InvoiceForm.jsx",["520","521","522","523"],"import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport Validator from 'validator';\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\nimport _ from \"lodash\";\n\nfunction InvoiceForm({ open }) {\n  const onInvoiceSubmit = (formValues) => {\n    console.log(formValues);\n  };\n  const onGunnaSubmit = (formValues) => {\n    console.log(formValues);\n  };\n  const validate = (formValues) => {\n    const errors = {};\n    // email\n\n\n    if (!formValues.header) \n      errors.header = \"Header is required\";\n      if (!formValues.termsAndCondition) \n      errors.termsAndCondition = \"Terms and Condition are required\";\n      if (!formValues.notes) \n      errors.notes = \"Notes is required\";\n      if (!formValues.footer) \n      errors.footer = \" Footer is required\";\n      if (formValues.discount && !Validator.isDecimal(formValues.discount))\n      errors.discount = \"Only numerical values are allowed\";\n      if (!formValues.discount) errors.discount = \"Discount is required\";\n      if (formValues.tax && !Validator.isDecimal(formValues.tax))\n      errors.tax = \"Only numerical values are allowed\";\n      if (!formValues.tax) errors.tax = \"Tax is required\";\n\n   \n\n    return errors;\n  };\n  const renderError = (meta) => {\n    if (meta.touched && meta.error)\n      return <div className=\"ui pointing red basic label\">{meta.error}</div>;\n    return undefined;\n  };\n\n\n\n  const renderForm = () => {\n    return (\n      <div>\n        <Form onSubmit={onInvoiceSubmit} validate ={validate}>\n          {({ handleSubmit, form, submitting, errors}) => (\n            <form onSubmit={handleSubmit}>\n              <div className=\"ui form\">\n                <h3 class=\"ui dividing header\">Invoice Settings</h3>\n\n                <Field name=\"header\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Header</label>\n                      <input {...input}></input>\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"termsAndCondition\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Terms and Condition</label>\n                      <textarea rows=\"4\" {...input}></textarea>\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"notes\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Notes</label>\n                      <input type=\"text\" {...input} />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <Field name=\"footer\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Footer</label>\n                      <input type=\"text\"  {...input} />\n                      <PointingError input = {input } meta = {meta} />\n                    </div>\n                  )}\n                </Field>\n                <div style={{ textAlign: \"center\" }}>\n                  <button  type=\"submit\"  type=\"submit\" className=\"ui primary button\">\n                    Save\n                  </button>\n                  <button   type=\"submit\" \n                    type=\"reset\"\n                    onClick={form.reset}\n                    className=\"ui button\"\n                  >\n                    Discard\n                  </button>\n                </div>\n              </div>\n            </form>\n          )}\n        </Form>\n        <Form onSubmit={onGunnaSubmit} validate ={validate} >\n          {({ handleSubmit, form, errors, submitting }) => (\n            <form onSubmit={handleSubmit}>\n              <div className=\"ui form\">\n                <h3 class=\"ui dividing header\">General Settings</h3>\n                <Field name=\"discount\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Discount (%)</label>\n                      <input type=\"text\" {...input} />\n                      <PointingError input = {input } meta = {meta} />\n                 \n                    </div>\n                  )}\n                </Field>\n                <Field name=\"tax\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Tax (%)</label>\n                      <input type=\"text\" {...input} />\n                      <PointingError input = {input } meta = {meta} />\n                      \n                    </div>\n                  )}\n                </Field>\n                <div style={{ textAlign: \"center\" }}>\n                  <button   type=\"submit\" className=\"ui primary button\">\n                    Save\n                  </button>\n                  <button \n                    type=\"reset\"\n                    onClick={form.reset}\n                    className=\"ui button\"\n                  >\n                    Discard\n                  </button>\n                </div>\n              </div>\n            </form>\n          )}\n        </Form>\n      </div>\n    );\n  };\n\n  return open ? renderForm() : null;\n}\n\nexport default InvoiceForm;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\SMSForm.jsx",["524","525","526"],"import React from \"react\";\nimport Switch from \"@material-ui/core/Switch\";\nimport CenteredTab from \"../Tabs/CenteredTab\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { Form, Field } from \"react-final-form\";\nimport Validator from \"validator\";\nimport { validate } from \"uuid\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\n\nconst smsHeadingData = [\n  \"To all patients With Appointments\",\n  \"To Specific patient only\",\n  \"Announcment opening to specific patients\",\n];\n\nfunction SMSForm({ open }) {\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n\n  const [currentTab, setcurrentTab] = React.useState(0);\n  const changeCurrentTab = (index) => {\n    setcurrentTab(index);\n  };\n\n  const [checked1, setChecked1] = React.useState(true);\n  const [checked2, setChecked2] = React.useState(true);\n  const [checked3, setChecked3] = React.useState(true);\n\n  const handleSwitch1Change = () => {\n    setChecked1(!checked1);\n  };\n\n  const handleSwitch2Change = () => {\n    setChecked2(!checked2);\n  };\n\n  const handleSwitch3Change = () => {\n    setChecked3(!checked3);\n  };\n\n\n\n  const validate = (formValues) => {\n    const errors = {};\n    // email\n   \n    if (!formValues.reason) errors.reason= \"Reason is required\";\n    // if (!formValues.description) errors.description = \"Item Code  is required\";\n    // if (!formValues.noOfItems) errors.noOfItems = \"No. of items is required\";\n    // if (!formValues.amount) errors.amount = \"Amount  is required\";\n    // if (!formValues.discount) errors.discount = \"Discount  is required\";\n    // if (!formValues.total) errors.total = \"Total is required\";\n\n   \n\n    return errors;\n  };\n  const renderError = (meta) => {\n    if (meta.touched && meta.error)\n      return <div className=\"ui pointing red basic label\">{meta.error}</div>;\n    return undefined;\n  };\n\n\n\n  const renderSwitches = () => {\n    return (\n      <div className=\"ui-form\" style={{ alignContent: \"space-between\" }}>\n        <h3 class=\"ui dividing header\">SMS Notification</h3>\n        <div class=\"form-group row\">\n          <label Htmlfor=\"staticEmail\" class=\"col-sm-5 col-form-label\">\n            Daily Notification for Consultants\n          </label>\n          <div class=\"col-sm-7\">\n            <Switch\n              checked={checked1}\n              onChange={handleSwitch1Change}\n              name=\"checkedA\"\n              inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n            />\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label Htmlfor=\"staticEmail\" class=\"col-sm-5 col-form-label\">\n            Daily Notification for Patients\n          </label>\n          <div class=\"col-sm-7\">\n            <Switch\n              checked={checked2}\n              onChange={handleSwitch2Change}\n              name=\"checkedA\"\n              inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n            />\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label Htmlfor=\"staticEmail\" class=\"col-sm-5 col-form-label\">\n            SMS Notification for Patients (Welcome to Clinic)\n          </label>\n          <div class=\"col-sm-7\">\n            <Switch\n              checked={checked3}\n              onChange={handleSwitch3Change}\n              name=\"checkedA\"\n              inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderToAllPatients = () => (\n    <div>\n      <div>\n        <Form onSubmit={onSubmit} validate ={validate}>\n          {({ handleSubmit, form }) => (\n            <form class=\"ui form\" onSubmit={handleSubmit}>\n              <Field name=\"leaveDate\">\n                {({ input, meta }) => (\n                  <div class=\"field\">\n                    <label>Leave Date</label>\n                    <TextField\n                      id=\"date\"\n                      type=\"date\"\n                      defaultValue=\"2017-05-24\"\n                      {...input}\n                      // className={classes.textField}\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                    />\n                     <PointingError input = {input } meta = {meta} />\n                  </div>\n                )}\n              </Field>\n              <Field name=\"reason\">\n                {({ input, meta }) => (\n                  <div class=\"field\">\n                    <label>Reason</label>\n                    <textarea rows=\"2\" {...input}></textarea>\n                    <PointingError input = {input } meta = {meta} />\n                  </div>\n                )}\n              </Field>\n              <Field name=\"smsNow\" type=\"checkbox\">\n                {({ input, meta }) => (\n                  <div class=\"field\">\n                    <FormControlLabel\n                      control={<Checkbox {...input} color=\"secondary\" />}\n                      label=\"Notify Me\"\n                      labelPlacement=\"end\"\n                    />\n                     <PointingError input = {input } meta = {meta} />\n                  </div>\n                )}\n              </Field>\n              <Field name=\"hoursbefore24\" type=\"checkbox\">\n                {({ input, meta }) => (\n                  <div class=\"field\">\n                    <FormControlLabel\n                      control={<Checkbox {...input} color=\"secondary\" />}\n                      label=\"24 Hrs Before\"\n                      labelPlacement=\"end\"\n                    />\n                     <PointingError input = {input } meta = {meta} />\n                  </div>\n                )}\n              </Field>\n              <Field name=\"onDayOfAppointment\" type=\"checkbox\">\n                {({ input, meta }) => (\n                  <div class=\"field ui 16 column wide\">\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          {...input}\n                          color=\"secondary\"\n                          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n                        />\n                      }\n                      labelPlacement=\"end\"\n                      label=\"SMS on the day of Appointment\"\n                    />\n\n                   <PointingError input = {input } meta = {meta} />\n                  </div>\n                )}\n              </Field>\n              <div style={{ textAlign: \"center\" }}>\n                <button type=\"submit\" className=\"ui primary button\">\n                  Save\n                </button>\n                <button type=\"reset\" className=\"ui button\" onClick={form.reset}>\n                  Discard\n                </button>\n              </div>\n            </form>\n          )}\n        </Form>\n      </div>\n    </div>\n  );\n\n  const renderToSpecificPatients = () => (\n    <div>\n      <div>\n        <Form onSubmit={onSubmit}>\n          {({ handleSubmit, form }) => (\n            <form class=\"ui form\" onSubmit={handleSubmit}>\n              <Field name=\"name\">\n                {({ input, meta }) => (\n                  <div class=\"field\">\n                    <label>Leave Date</label>\n                    <TextField\n                      id=\"date\"\n                      type=\"date\"\n                      defaultValue=\"2017-05-24\"\n                      {...input}\n                      // className={classes.textField}\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                    />\n                  </div>\n                )}\n              </Field>\n              <Field name=\"name\">\n                {({ input, meta }) => (\n                  <div class=\"field\">\n                    <label>Patient Name</label>\n                    <input type=\"text\" {...input} placeholder=\"Patient Name\" />\n                  </div>\n                )}\n              </Field>\n              <Field name=\"reasons\">\n                {({ input, meta }) => (\n                  <div class=\"field\">\n                    <label>Reason</label>\n                    <textarea rows=\"2\" {...input}></textarea>\n                  </div>\n                )}\n              </Field>\n              <Field type=\"checkbox\" name=\"notifyMe\">\n                {({ input, meta }) => (\n                  <div class=\"field\">\n                    <FormControlLabel\n                      control={<Checkbox {...input} color=\"secondary\" />}\n                      label=\"Notify Me\"\n                      labelPlacement=\"end\"\n                    />\n                    {console.log(input)}\n                  </div>\n                )}\n              </Field>\n              <Field name=\"smsOnDateOfAppointment\">\n                {({ input, meta }) => (\n                  <div className=\"field\">\n                    <FormControlLabel\n                      value={true}\n                      control={<Checkbox {...input} color=\"secondary\" />}\n                      label=\"SMS ON THE DAY OF APPOINTMENT\"\n                      labelPlacement=\"end\"\n                    />\n                  </div>\n                )}\n              </Field>\n              <Field name=\"24hrsbefore\">\n                {({ input, meta }) => (\n                  <div className=\"field\">\n                    <FormControlLabel\n                      value={true}\n                      control={<Checkbox {...input} color=\"secondary\" />}\n                      label=\"24 Hrs Before\"\n                      labelPlacement=\"end\"\n                    />\n                  </div>\n                )}\n              </Field>\n              <div style={{ textAlign: \"center\" }}>\n                <button type=\"submit\" className=\"ui primary button\">\n                  Save\n                </button>\n                <button type=\"reset\" className=\"ui button\" onClick={form.reset}>\n                  Discard\n                </button>\n              </div>\n            </form>\n          )}\n        </Form>\n      </div>\n    </div>\n  );\n  const renderAnnounceToSpecificPatients = () => (\n    <div>\n      <Form onSubmit={onSubmit} initialValues={{ smsOn: true }}>\n        {({ handleSubmit, form }) => (\n          <form class=\"ui form\" onSubmit={handleSubmit}>\n            <Field name=\"openingDate\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>Opening Date</label>\n                  <TextField\n                    id=\"date\"\n                    type=\"date\"\n                    {...input}\n                    // className={classes.textField}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                </div>\n              )}\n            </Field>\n            <Field name=\"patientName\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>Patient Name</label>\n                  <input type=\"text\" {...input} placeholder=\"Patient Name\" />\n                </div>\n              )}\n            </Field>\n            <div class=\"field\">\n              <label>Reason</label>\n              <TextareaAutosize\n                rowsMax={4}\n                aria-label=\"maximum height\"\n                placeholder=\"Maximum 4 rows\"\n                defaultValue=\"Ring Road Physiotherapy Centre  is reopening our services to the public after this COVID-19 disaster\"\n                readOnly\n              />\n            </div>\n            <Field name=\"smsOn\" type=\"checkbox\">\n              {({ input, meta }) => (\n                <div class=\"field \" style={{ flexDirection: \"row\" }}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox {...input} color=\"secondary\" label=\"SMS NOW\" />\n                    }\n                    label=\"SMS Now\"\n                    labelPlacement=\"end\"\n                  />\n                </div>\n              )}\n            </Field>\n            <div style={{ textAlign: \"center\" }}>\n              <button type=\"submit\" className=\"ui primary button\">\n                Save\n              </button>\n              <button type=\"reset\" className=\"ui button\" onClick={form.reset}>\n                Discard\n              </button>\n            </div>\n          </form>\n        )}\n      </Form>\n    </div>\n  );\n\n  const renderTabs = () => {\n    if (currentTab === 0) return renderToAllPatients();\n    if (currentTab === 1) return renderToSpecificPatients();\n    if (currentTab === 2) return renderAnnounceToSpecificPatients();\n  };\n\n  const renderForm = () => {\n    return (\n      <div>\n        <div>\n          {renderSwitches()}\n\n          <h3 class=\"ui dividing header\">Announce Holiday</h3>\n          <CenteredTab\n            headings={smsHeadingData}\n            changeActiveTab={changeCurrentTab}\n          />\n          {renderTabs()}\n        </div>\n      </div>\n    );\n  };\n\n  return open ? renderForm() : null;\n}\n\nexport default SMSForm;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Menus\\SettingMenu.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Tables\\AppointmentTable.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\LandingPage\\ErrorComponent\\PointingError.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Tables\\Table.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\actions\\feedbackAction.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Tabs\\CenteredTab.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Grid\\TopDrawerGrid.jsx",["527"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"../Card/Card\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { connect } from \"react-redux\";\nimport { getAllApointments } from \"../../actions/appointmentAction\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst TopDrawerGrid = (props) => {\n  const classes = useStyles();\n  React.useEffect(() => {\n    props.getAllApointments();\n  }, []);\n  const appointmentData = [];\n  props.appointments &&\n    props.appointments.forEach((appointment, index) => {\n      const data = {\n        name: `${appointment.formData.patient.firstName} ${appointment.formData.patient.lastName} `,\n        time: `${new Date(appointment.start).toLocaleTimeString()} : ${new Date(\n          appointment.start\n        ).toDateString()}`,\n        treatment: `${appointment.formData.treatment.name}`,\n        consultant: props.user.name,\n      };\n      appointmentData.push(data);\n    });\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5}>\n        {console.log(appointmentData)}\n        {appointmentData.slice(0, 4).map((appointment) => {\n          return (\n            <Grid item xs={3} key={uuidv4()}>\n              <Paper className={classes.paper}>\n                <Card data={appointment} />\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    appointments: state.appointments,\n    user: state.auth.user,\n  };\n};\n\nexport default connect(mapStateToProps, { getAllApointments })(TopDrawerGrid);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Pediatric.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Buttons\\UpgradeButton.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Fab\\fab.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Card\\Card.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\ChiefComplaint.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Neuro.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\TreatmentProtocol.jsx",["528","529","530","531","532"],"import React from \"react\";\nimport BasicContainer from \"../Container/BasicContainer\";\nimport { TextareaAutosize } from \"@material-ui/core\";\nimport { Grid } from \"@material-ui/core\";\nimport { Form, Field } from \"react-final-form\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport AddNewTreatmentCategory from \"./AddNewTreatmentCategory\";\nimport TreatmentCalender from \"./TreatmentCalender\";\nimport AppointmentTable from \"../Tables/AppointmentTable\";\nimport { connect } from \"react-redux\";\nimport { addInvoice } from \"../../actions/invoiceAction\";\nimport { getInvoicesByPatientID } from \"../../actions/invoiceAction\";\nimport { useLocation } from \"react-router-dom\";\nimport { invoices } from \"../../reducers/invoiceReducer\";\n\nfunction TreatmentProtocol(props) {\n  const [selectDays, setSelectDays] = React.useState([]);\n  const location = useLocation();\n  const id = location.pathname.split(\"/\")[2];\n\n  React.useEffect(() => {\n    props.getInvoicesByPatientID(id);\n  }, []);\n\n  const onSubmit = (formValues) => {\n    const formData = {\n      ...formValues,\n      patient: props.selectedPatient._id,\n      date: selectDays,\n    };\n    // console.log(formData);\n    props.addInvoice(formData);\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  // const initialValues = { date: new Date().toISOString().substr(0, 10) };\n\n  const treatmentProtocolHeading = [\n    { id: \"date\", label: \"Date\" },\n    { id: \"treatment\", label: \"Treatment\" },\n    { id: \"quantity\", label: \"Quantity\" },\n    { id: \"price\", label: \"Price\" },\n    { id: \"consultant\", label: \"Consultant\" },\n    { id: \"action\", label: \"Action\" },\n  ];\n\n  function sortByKey(array, key) {\n    return array.sort(function (a, b) {\n      var x = new Date(a[key]).getTime();\n      var y = new Date(b[key]).getTime();\n      return x < y ? 1 : x > y ? -1 : 0;\n    });\n  }\n\n  let tableData = [];\n\n  if (props.invoices.length > 0) {\n    for (let i = 0; i < props.invoices.length; i++) {\n      const data = { ...props.invoices[i], date: undefined, action: \"actions\" };\n      props.invoices[i].date.forEach((d) => {\n        tableData.push({ ...data, date: d, consultant: props.consultant });\n      });\n    }\n    sortByKey(tableData, \"date\");\n  }\n  tableData = tableData.map((row) => {\n    return { ...row, date: new Date(row.date).toDateString() };\n  });\n\n  console.log(tableData, \"data in invoice table\", props.invoices);\n  const renderTable = () => {\n    return (\n      <AppointmentTable headings={treatmentProtocolHeading} rows={tableData} />\n    );\n  };\n\n  return (\n    <div>\n      <Form onSubmit={onSubmit}>\n        {({ handleSubmit, form }) => (\n          <form onSubmit={handleSubmit} className=\"ui form\">\n            <div className=\"text-center\">\n              <div\n                className=\"ui segment\"\n                style={{ backgroundColor: \"inherit\" }}\n              >\n                <div className=\"ui two column very relaxed grid \">\n                  <div class=\"ui vertical divider\">AND</div>\n                  <div className=\"column\">\n                    <div className=\"field\">\n                      <Grid container spacing={10}>\n                        <Grid item xs={6}>\n                          <div className=\"item\">\n                            <Field name=\"treatment\">\n                              {({ input, meta }) => (\n                                <div className=\"field\">\n                                  <label>Treatments</label>\n                                  <input type=\"text\" {...input} />\n                                  {/* <PointingError input = {input } meta = {meta} /> */}\n                                </div>\n                              )}\n                            </Field>\n                          </div>\n                          <div className=\"item\">\n                            <Field name=\"sessions\">\n                              {({ input, meta }) => (\n                                <div className=\"field\">\n                                  <label>\n                                    No. Of Sessions ( For Each Day )\n                                  </label>\n                                  <input type=\"text\" {...input} />\n                                  {/* <PointingError input = {input } meta = {meta} /> */}\n                                </div>\n                              )}\n                            </Field>\n                          </div>\n                          <div className=\"item\">\n                            <Field name=\"price\">\n                              {({ input, meta }) => (\n                                <div className=\"field\">\n                                  <label>Price</label>\n                                  <input type=\"text\" {...input} />\n                                  {/* <PointingError input = {input } meta = {meta} /> */}\n                                </div>\n                              )}\n                            </Field>\n                          </div>\n                          <br />\n                          <br />\n                          <div className=\"item\">\n                            <Field name=\"consultant\">\n                              {({ input, meta }) => (\n                                <div className=\"field\">\n                                  <label>Consultant Name</label>\n                                  <input type=\"text\" {...input} />\n                                  {/* <PointingError input = {input } meta = {meta} /> */}\n                                </div>\n                              )}\n                            </Field>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    </div>\n                  </div>\n                  <div className=\"column\">\n                    <div className=\"field\">\n                      <Grid item xs={6}>\n                        <div style={{ textAlign: \"center\" }}>\n                          <button\n                            className=\"ui primary button\"\n                            onClick={handleOpen}\n                          >\n                            Add New Treatment\n                          </button>\n                          <Dialog\n                            maxWidth=\"md\"\n                            open={open}\n                            onClose={handleClose}\n                          >\n                            <AddNewTreatmentCategory />\n                          </Dialog>\n                        </div>\n                        <br />\n                        <br />\n                        <div className=\"item\">\n                          <TreatmentCalender\n                            selectDays={selectDays}\n                            setSelectDays={setSelectDays}\n                          />\n                        </div>\n                      </Grid>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <br />\n                <br />\n                <div style={{ textAlign: \"center\" }}>\n                  <button\n                    // disabled={!_.isEmpty(errors) || submitting}\n                    className=\"ui primary button\"\n                  >\n                    Submit\n                  </button>\n                  <button\n                    // disabled={!_.isEmpty(errors) || submitting}\n                    className=\"ui button\"\n                  >\n                    Discard\n                  </button>\n                </div>\n              </div>\n            </div>\n          </form>\n        )}\n      </Form>\n      <br />\n      <br />\n      <div>{renderTable()}</div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    invoices: state.invoices,\n    selectedPatient: state.selectedPatient,\n    consultant: state.auth.user.name,\n  };\n};\n\nexport default connect(mapStateToProps, { addInvoice, getInvoicesByPatientID })(\n  TreatmentProtocol\n);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Stepper\\Stepper.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Calendar\\Calendar.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddNewTreatmentCategory.jsx",["533"],"import React from \"react\";\nimport BasicContainer from \"../Container/BasicContainer\";\nimport AddNewTreatment from \"../Forms/AddNewTreatment\";\n\nfunction AddNewTreatmentCategory() {\n  const categories = [\n    \"Electrical Modalities\",\n    \"Thermal Modalities\",\n    \"Non Thermal Modalities\",\n    \"Manual Therapy\",\n    \"Alternative Therapy\",\n    \"Re-Education\",\n  ];\n\n  const data = {\n    \"Electrical Modalities\": [\n      \"Transcutaneous Electrical Nerve Stimulation (TENS)\",\n      \"Interferential Therapy (IFT)\",\n      \"Neuromuscular Electrical Stimulation (NMES)\",\n      \"Functional Electrical Stimulation (FES)\",\n      \"Faradic Stimulation\",\n      \"Iontophoresis\",\n      \"Highly Voltage Pulsed Galvanic Stimulation (HVPGS)\",\n      \"Low Intensity Direct Current (LIDC) and Pulsed LIDC\",\n      \"Twin Peak Monophasic Stimulation\",\n      \"Diadynamic Therapy\",\n      \"H Wave Therapy : Action Potential System\",\n      \"Russian Stimulation : Medium Frequency Stimulation\",\n      \"Rebox Therapy; Scenar Therapy\",\n      \"Micro current Therapy\",\n    ],\n    \"Thermal Modalities\": [\n      \"Infra Red Radiation (IRR)\",\n      \"Microwave Diatheramy (MWD)\",\n      \"Short Wave Diatheramy (SWD)\",\n      \"Wax Therapy\",\n      \"Hydrocollatoral Packs\",\n      \"Therapeutic Ultrasound\",\n      \"Fluidotherapy\",\n      \"Laser Therapy\",\n    ],\n    \"Non Thermal Modalities\": [\n      \"Pulsed Ultrasound\",\n      \"Low Intensity Pulsed Ultrasound (LIPUS)\",\n      \"(Pulsed) Shortwave Therapy\",\n      \"(Pulsed) Laser Therapy\",\n      \"(Pulsed) Microwave Therapy\",\n      \"Pulsed Electro-Magnetic Field Therapy (PEMF)\",\n      \"Magnetic Therapies\",\n      \"Pulsed Magnetic Therapies\",\n      \"Static Magnetic Therapy\",\n      \"Cryotherapy\",\n    ],\n    \"Manual Therapy\": [\"\"],\n    \"Alternative Therapy\": [\n      \"Cupping Therapy \",\n      \"Dry Needling\",\n      \"KinesioTaping\",\n    ],\n    \"Re-Education\": [\n      \"Neuro-muscular Re-education\",\n      \"Gait training\",\n      \"Cardiopulmonary exercise program\",\n    ],\n  };\n\n  const [treatment, setTreatment] = React.useState(\"\");\n\n  return (\n    <AddNewTreatment\n      categories={categories}\n      setTreatment={setTreatment}\n      treatment={data[treatment] || []}\n    />\n  );\n}\n\nexport default AddNewTreatmentCategory;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Goals.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddDiagnosis.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\FormLayout.jsx",["534","535","536","537","538"],"import React from \"react\";\nimport Slide from \"@material-ui/core/Slide\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Validator from \"validator\";\nimport _ from \"lodash\";\n\nimport {\n  TextField,\n  FormControlLabel,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Checkbox,\n  Radio,\n  Tooltip,\n  Dialog,\n  ListItem,\n} from \"@material-ui/core\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport TreatmentForm from \"./TreatmentForm\";\nimport AddPatientForm from \"./AddPatient\";\nimport { patients, treatments } from \"../../db\";\n\nimport { Form, Field } from \"react-final-form\";\nimport \"date-fns\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport findOne from \"../../helpers/findOne\";\nimport { getTreatments } from \"../../actions/treatmentAction\";\nimport { getAllPatients } from \"../../actions/patientAction\";\nimport { connect } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 200,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n    minWidth: 150,\n  },\n}));\n\nfunction FormLayout(props) {\n  const classes = useStyles();\n\n  // const [patients, setPatients] = React.useState(null);\n  // const [treatments, setTreatments] = React.useState(null);\n\n  React.useEffect(() => {\n    props.getAllPatients();\n    props.getTreatments();\n  }, []);\n\n  const onSubmit = (formValues) => {\n    // console.log(\"treatment\", formValues.treatment);\n    // console.log(\"patient\", formValues.patient);\n    const data = { ...formValues };\n    data.patient = findOne(props.patients, { _id: formValues.patient });\n    data.treatment = findOne(props.treatments, { _id: formValues.treatment });\n\n    data.date = startStr;\n    data.start = startStr;\n    data.end = endStr;\n    // console.log(\"form values \", data);\n    props.onSubmit(data);\n  };\n\n  const [startStr, setStartStr] = React.useState(props.startStr);\n  const [form, setForm] = React.useState(0);\n\n  const handleStartTimeChange = (date) => {\n    setStartStr(date);\n  };\n\n  const [endStr, setEndStr] = React.useState(props.endStr);\n\n  const handleEndTimeChange = (date) => {\n    setEndStr(date);\n  };\n\n  const renderForm = () => {\n    if (form === 2) return showAddTreatmentForm();\n    if (form === 1) return showAddPatientForm();\n  };\n\n  const RadioComponent = ({ input, children }) => (\n    <label>\n      <Radio {...input} />\n      {children}\n    </label>\n  );\n\n  const validate = (formValues) => {\n    const errors = {};\n\n    if (!formValues.title) errors.title = \"title is required\";\n    if (_.isEmpty(formValues.generate)) errors.generate = \"this is required\";\n    if (!formValues.encounterType) errors.encounterType = \"this is required\";\n    if (!formValues.visitType) errors.visitType = \"this is required\";\n    return errors;\n  };\n\n  const renderAddAppointmentContent = () => {\n    return (\n      <div style={{ margin: \"1rem\" }}>\n        <div className=\"field\">\n          <Field name=\"title\">\n            {({ input, meta }) => (\n              <div>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  {...input}\n                  label=\"Title\"\n                  type=\"text\"\n                  fullWidth\n                  placeholder=\"Title\"\n                />\n                <PointingError input={input} meta={meta} />\n              </div>\n            )}\n          </Field>\n        </div>\n        <div>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n              <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"dd/MM/yyyy\"\n                  margin=\"normal\"\n                  id=\"date-picker-inline\"\n                  label=\"Date On\"\n                  value={startStr}\n                  onChange={handleStartTimeChange}\n                  KeyboardButtonProps={{\n                    \"aria-label\": \"change date\",\n                  }}\n                />\n              </Grid>\n\n              <KeyboardTimePicker\n                margin=\"normal\"\n                id=\"time-picker1\"\n                label=\"Time From\"\n                value={startStr}\n                onChange={handleStartTimeChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change time\",\n                }}\n              />\n\n              <KeyboardTimePicker\n                margin=\"normal\"\n                id=\"time-picker2\"\n                label=\"Time To\"\n                value={endStr}\n                onChange={handleEndTimeChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change time\",\n                }}\n              />\n            </Grid>\n          </MuiPickersUtilsProvider>\n        </div>\n        <br />\n\n        <div className=\"ui form\">\n          <Field name=\"notes\">\n            {({ input, meta }) => (\n              <div class=\"field\">\n                <label>Notes</label>\n                <textarea rows=\"3\" {...input}></textarea>\n                <PointingError input={input} meta={meta} />\n              </div>\n            )}\n          </Field>\n\n          <div className=\"field\">\n            <label>Generate</label>\n\n            <div className=\"inline fields\">\n              <Field name=\"generate.treatmentProtocol\" type=\"checkbox\">\n                {({ input, meta }) => (\n                  <div>\n                    <FormControlLabel\n                      control={<Checkbox name=\"checkedC\" {...input} />}\n                      label=\"Treatment Protocol\"\n                    />\n                    <PointingError input={input} meta={meta} />\n                  </div>\n                )}\n              </Field>\n              <Field name=\"generate.dailyRegister\" type=\"checkbox\">\n                {({ input, meta }) => (\n                  <FormControlLabel\n                    control={<Checkbox name=\"checkedD\" {...input} />}\n                    label=\"Daily Register\"\n                  />\n                )}\n              </Field>\n              <Field name=\"generate.invoice\" type=\"checkbox\">\n                {({ input, meta }) => (\n                  <FormControlLabel\n                    control={<Checkbox name=\"checkedE\" {...input} />}\n                    label=\"Invoice\"\n                  />\n                )}\n              </Field>\n            </div>\n          </div>\n          <div className=\"ui segment\" style={{ backgroundColor: \"inherit\" }}>\n            <div className=\"ui two column very relaxed grid \">\n              <div class=\"ui vertical divider\">And</div>\n              <div className=\"column\">\n                <div className=\"field\">\n                  <label>Visit Type</label>\n                  <div className=\"inline fields\">\n                    <Field\n                      name=\"visitType\"\n                      value=\"0\"\n                      type=\"radio\"\n                      component={RadioComponent}\n                    >\n                      First Visit\n                    </Field>\n                    <Field\n                      name=\"visitType\"\n                      value=\"1\"\n                      type=\"radio\"\n                      component={RadioComponent}\n                    >\n                      Follow Up\n                    </Field>\n                  </div>\n                </div>\n                <div className=\"field\">\n                  <label>Encounter Type</label>\n                  <div className=\"inline fields\">\n                    <Field\n                      name=\"encounterType\"\n                      type=\"radio\"\n                      value=\"0\"\n                      component={RadioComponent}\n                    >\n                      In Person\n                    </Field>\n                    <Field\n                      name=\"encounterType\"\n                      type=\"radio\"\n                      value=\"1\"\n                      component={RadioComponent}\n                    >\n                      Online\n                    </Field>\n                  </div>\n                </div>\n              </div>\n              <div className=\"column\">\n                <div className=\"field\">\n                  <label>Notify Consultant</label>\n                  <div className=\"inline fields\">\n                    <Field name=\"notifyConsultant.email\" type=\"checkbox\">\n                      {({ input, meta }) => (\n                        <FormControlLabel\n                          control={<Checkbox name=\"checkedC\" {...input} />}\n                          label=\"Email\"\n                        />\n                      )}\n                    </Field>\n                    <Field name=\"notifyConsultant.sms\" type=\"checkbox\">\n                      {({ input, meta }) => (\n                        <FormControlLabel\n                          control={<Checkbox name=\"checkedC\" {...input} />}\n                          label=\"SMS\"\n                        />\n                      )}\n                    </Field>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"field\">\n                    <label>Notify Patient</label>\n                    <div className=\"inline fields\">\n                      <Field name=\"notifyPatient.email\" type=\"checkbox\">\n                        {({ input, meta }) => (\n                          <FormControlLabel\n                            control={<Checkbox name=\"checkedC\" {...input} />}\n                            label=\"Email\"\n                          />\n                        )}\n                      </Field>\n                      <Field name=\"notifyPatient.sms\" type=\"checkbox\">\n                        {({ input, meta }) => (\n                          <FormControlLabel\n                            control={<Checkbox name=\"checkedC\" {...input} />}\n                            label=\"SMS\"\n                          />\n                        )}\n                      </Field>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  const TransitionRight = React.forwardRef(function Transition(props, ref) {\n    return (\n      <Slide direction=\"right\" timeout={{ appear: 200 }} ref={ref} {...props} />\n    );\n  });\n\n  const showAddTreatmentForm = () => {\n    return (\n      <Dialog\n        TransitionComponent={TransitionLeft}\n        maxWidth=\"md\"\n        open={form === 2}\n        onClose={() => setForm(0)}\n        aria-labelledby=\"form-dialog-title\"\n        PaperProps={{\n          style: {\n            backgroundColor: \"rgb(240,240,240)\",\n          },\n        }}\n      >\n        <div style={{ height: \"40rem\", width: \"30rem\" }}>\n          <TreatmentForm closeForm={() => setForm(0)} />\n        </div>\n      </Dialog>\n    );\n  };\n  const TransitionLeft = React.forwardRef(function Transition(props, ref) {\n    return (\n      <Slide direction=\"left\" timeout={{ appear: 200 }} ref={ref} {...props} />\n    );\n  });\n\n  const showAddPatientForm = () => {\n    return (\n      <Dialog\n        TransitionComponent={TransitionRight}\n        maxWidth=\"md\"\n        open={form === 1}\n        onClose={() => setForm(0)}\n        aria-labelledby=\"form-dialog-title\"\n        PaperProps={{\n          style: {\n            backgroundColor: \"rgb(240,240,240)\",\n          },\n        }}\n      >\n        <div style={{ height: \"40rem\", width: \"30rem\" }}>\n          <AddPatientForm closeForm={() => setForm(0)} />\n        </div>\n      </Dialog>\n    );\n  };\n\n  return (\n    <div\n      style={{\n        borderRadius: \"5rem\",\n        height: \"100vh\",\n        width: \"80vh\",\n      }}\n    >\n      <Form\n        onSubmit={onSubmit}\n        validate={validate}\n        initialValues={{ visitType: \"0\", encounterType: \"0\" }}\n      >\n        {({ handleSubmit, forms }) => (\n          <form onSubmit={handleSubmit}>\n            <div\n              style={{\n                marginLeft: \"1rem\",\n              }}\n            >\n              <div>\n                <h2 className=\"ui center aligned icon header\">\n                  <i className=\"circular users icon\"></i>\n                  Add Appointment\n                </h2>\n                <div>\n                  <h4 class=\"ui horizontal divider header\">\n                    <i class=\"wpforms icon\"></i>\n                    Fill the form\n                  </h4>\n                </div>\n              </div>\n              <div>\n                <div\n                  class=\"ui left floated segment\"\n                  style={{\n                    backgroundColor: \"inherit\",\n                    borderWidth: \"0px\",\n                    boxShadow: \"none\",\n                    marginRight: \"-5rem\",\n                    marginTop: \"0rem\",\n                  }}\n                >\n                  <FormControl variant=\"outlined\">\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\n                      Select Patient\n                    </InputLabel>\n                    <Field name=\"patient\" type=\"select\">\n                      {({ input, meta }) => (\n                        <Select\n                          className={classes.selectEmpty}\n                          labelId=\"demo-simple-select-outlined-label\"\n                          id=\"demo-simple-select-outlined\"\n                          {...input}\n                          // onChange={handleChange}\n                          label=\"Select Patient\"\n                        >\n                          {/* <MenuItem>\n                            <input\n                              type=\"text\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                              }}\n                            />\n                          </MenuItem> */}\n                          {props.patients.map((patient) => (\n                            <MenuItem key={patient._id} value={patient._id}>\n                              {patient.firstName}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      )}\n                    </Field>\n                  </FormControl>\n                  <Tooltip title=\"Add Patient\">\n                    <Fab\n                      aria-label=\"add\"\n                      style={{ marginTop: \"1rem\", marginLeft: \"1rem\" }}\n                      onClick={() => setForm(1)}\n                    >\n                      <AddIcon />\n                    </Fab>\n                  </Tooltip>\n                </div>\n\n                <div\n                  class=\"ui right floated segment\"\n                  style={{\n                    backgroundColor: \"inherit\",\n                    borderWidth: \"0px\",\n                    boxShadow: \"none\",\n                    marginTop: \"-0rem\",\n                    marginLeft: \"-5rem\",\n                  }}\n                >\n                  <Tooltip title=\"Add Treatment\">\n                    <Fab\n                      aria-label=\"add\"\n                      style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}\n                      onClick={() => setForm(2)}\n                    >\n                      <AddIcon />\n                    </Fab>\n                  </Tooltip>\n\n                  <FormControl variant=\"outlined\">\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\n                      Select Treatment\n                    </InputLabel>\n                    <Field name=\"treatment\" type=\"select\">\n                      {({ input, meta }) => (\n                        <Select\n                          className={classes.selectEmpty}\n                          labelId=\"demo-simple-select-outlined-label\"\n                          id=\"demo-simple-select-outlined\"\n                          {...input}\n                          // onChange={handleChange}\n                          label=\"Select Treatment\"\n                        >\n                          {props.treatments.map((treatment) => (\n                            <MenuItem key={treatment._id} value={treatment._id}>\n                              {treatment.name}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      )}\n                    </Field>\n                  </FormControl>\n                </div>\n              </div>\n              {renderAddAppointmentContent()}\n\n              <div style={{ textAlign: \"center\" }}>\n                <button type=\"submit\" className=\"ui primary button\">\n                  Save\n                </button>\n                <button type=\"reset\" onClick={form.reset} className=\"ui button\">\n                  Discard\n                </button>\n              </div>\n            </div>\n          </form>\n        )}\n      </Form>\n\n      {renderForm()}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return { patients: state.patients, treatments: state.treatments };\n};\n\nexport default connect(mapStateToProps, { getAllPatients, getTreatments })(\n  FormLayout\n);\n","D:\\physiomatic\\dashboard-main\\src\\actions\\tableAction.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\MasterForm.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Grid\\CenteredGrid.jsx",["539"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { connect } from \"react-redux\";\nimport { Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction CenteredGrid(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root} style={{ paddingBottom: \"10px\" }} style={{ paddingTop: \"5px\" }}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}><Typography variant=\"h4\" color=\"primary\">{props.heading}</Typography></Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\nconst mapStateToProps = (state) => {\n  return { heading: state.tableHeading };\n};\n\nexport default connect(mapStateToProps)(CenteredGrid);\n","D:\\physiomatic\\dashboard-main\\src\\components\\Charts\\BarChart.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\JumboButton\\JumboButton.jsx",["540"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DoubleArrowRoundedIcon from \"@material-ui/icons/DoubleArrowRounded\";\nimport { changeHeading } from \"../../actions/tableAction\";\nimport { connect } from \"react-redux\";\nimport SimplePaper from \"../Paper/paper\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst JumboButton = (props) => {\n  const handleClick = (value) => {\n    props.changeHeading(props.data[value].heading);\n    // props.renderTable();\n    // props.handler(value);\n  };\n\n  const count = props.count;\n  const width = props.width;\n\n  const renderJumbo = () => {\n    return (\n      <div>\n        <Grid container spacing={1}>\n          {props.data.map((object, index) => {\n            return (\n              <Grid\n                key={uuidv4()}\n                item\n                xs={width}\n                onClick={() => {\n                  handleClick(index);\n                  // renderTable();\n                }}\n              >\n                <div>\n                  {props.showBox ? (\n                    <SimplePaper data={object.data.count} />\n                  ) : undefined}\n\n                  <div\n                    className=\"jumbotron\"\n                    style={{\n                      cursor: \"pointer\",\n                      backgroundColor: \"rgba(200,200,200,0.7)\",\n                    }}\n                  >\n                    <div className=\"d-flex justify-content-center\">\n                      <h2 className=\"display-5\">{object.heading}</h2>\n                    </div>\n                    <br />\n\n                    {props.showBox ? undefined : (\n                      <div className=\"d-flex justify-content-center\">\n                        {\" \"}\n                        <h2 className=\"display-4\">{object.data.count}</h2>{\" \"}\n                        <br /> <br />{\" \"}\n                      </div>\n                    )}\n                    <br />\n                    <div className=\"d-flex justify-content-center\">\n                      {props.arrowIcon ? (\n                        <DoubleArrowRoundedIcon fontSize=\"large\" />\n                      ) : undefined}\n                    </div>\n                  </div>\n                </div>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </div>\n    );\n  };\n\n  return <div>{renderJumbo()}</div>;\n};\n\nexport default connect(null, { changeHeading })(JumboButton);\n","D:\\physiomatic\\dashboard-main\\src\\components\\LandingPage\\Dividers\\VerticalDivider.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\helpers\\findOne.js",[],"D:\\physiomatic\\dashboard-main\\src\\actions\\invoiceAction.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\TreatmentCalender.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\EhrComponent\\Step1.jsx",["541","542"],"import React from \"react\";\nimport { Field } from \"react-final-form\";\nimport { RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\nimport Validator from \"validator\";\nimport _ from \"lodash\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\n\nexport default function YesbirStepper() {\n  const RadioComponent = ({ input }) => <Radio {...input} />;\n\n  return (\n    <div>\n      <div class=\"ui segment\">\n        <div class=\"ui two column very relaxed grid\">\n          <div class=\"column\">\n            <Field name=\"firstName\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>First Name </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter First Name\"\n                    {...input}\n                  />\n                  <PointingError input={input} meta={meta} />\n                </div>\n              )}\n            </Field>\n\n            <div class=\"field\">\n              <label>Patient Type *</label>\n              <RadioGroup row>\n                <FormControlLabel\n                  label=\"OP Patient\"\n                  control={\n                    <Field\n                      name=\"patientType\"\n                      component={RadioComponent}\n                      type=\"radio\"\n                      value=\"op\"\n                    />\n                  }\n                />\n                <FormControlLabel\n                  label=\"Home Patient\"\n                  control={\n                    <Field\n                      name=\"patientType\"\n                      component={RadioComponent}\n                      type=\"radio\"\n                      value=\"home\"\n                    />\n                  }\n                />\n              </RadioGroup>\n            </div>\n\n            <div class=\"field\">\n              <label>Gender </label>\n              <RadioGroup row>\n                <FormControlLabel\n                  label=\"Male\"\n                  control={\n                    <Field\n                      name=\"gender\"\n                      component={RadioComponent}\n                      type=\"radio\"\n                      value=\"male\"\n                    />\n                  }\n                />\n                <FormControlLabel\n                  label=\"Female\"\n                  control={\n                    <Field\n                      name=\"gender\"\n                      component={RadioComponent}\n                      type=\"radio\"\n                      value=\"female\"\n                    />\n                  }\n                />\n              </RadioGroup>\n            </div>\n            <Field name=\"refNumber\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>Clinical Reference number </label>\n                  <input type=\"text\" {...input} />\n                  <PointingError input={input} meta={meta} />\n                </div>\n              )}\n            </Field>\n            {/* <Field name=\"date\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>Date </label>\n                  <input type=\"text\" placeholder=\"DD/MM/YYYY\" {...input} />\n                  <PointingError input={input} meta={meta} />\n                </div>\n              )}\n            </Field> */}\n          </div>\n          <div class=\"column\">\n            <Field name=\"lastName\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>Last Name </label>\n                  <input type=\"text\" placeholder=\"Enter Last Name\" {...input} />\n                  <PointingError input={input} meta={meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"email\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>Email</label>\n                  <input type=\"text\" placeholder=\"Enter Email\" {...input} />\n                  <PointingError input={input} meta={meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"mobile\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>Mobile Number </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter Mobile no.\"\n                    {...input}\n                  />\n                  <PointingError input={input} meta={meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"dob\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>Date of Birth </label>\n                  <input type=\"text\" placeholder=\"DD/MM/YYYY\" {...input} />\n                  <PointingError input={input} meta={meta} />\n                </div>\n              )}\n            </Field>\n            {/* <Field name=\"age\">\n              {({ input, meta }) => (\n                <div class=\"field\">\n                  <label>Age </label>\n                  <input type=\"text\" placeholder=\"Age\" {...input} />\n                  <PointingError input={input} meta={meta} />\n                </div>\n              )}\n            </Field> */}\n          </div>\n        </div>\n        <div class=\"ui vertical divider\">and</div>\n      </div>\n      <div style={{ textAlign: \"center\" }}>\n        <button type=\"submit\" className=\"ui primary button\">\n          Save\n        </button>\n        <button type=\"reset\" className=\"ui button\">\n          Discard\n        </button>\n      </div>\n    </div>\n  );\n}\n","D:\\physiomatic\\dashboard-main\\src\\components\\EhrComponent\\Step3.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Fab\\CustomFab.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\EhrComponent\\Step2.jsx",["543"],"import React from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { Form, Field } from \"react-final-form\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport PointingError from \"../LandingPage/ErrorComponent/PointingError\";\n\nexport default function AshuStepper() {\n  const [married, setMarried] = React.useState(false);\n  const RadioComponent = ({ input }) => {\n    if (input.value === \"married\" && input.checked) {\n      setMarried(true);\n    }\n    if (input.value === \"single\" && input.checked) {\n      setMarried(false);\n    }\n    console.log(married);\n    return <Radio {...input} />;\n  };\n\n\n\n\n\n  return (\n    <div class=\"ui segment\">\n      <div class=\"ui two column very relaxed grid\">\n        <div class=\"column\">\n          <Field name=\"dominance\">\n            {({ input, meta }) => (\n              <div className=\"field\">\n                <label>Dominance (R/L)</label>\n                <input type=\"text\" {...input} />\n                <PointingError input = {input } meta = {meta} />\n              </div>\n            )}\n          </Field>\n          <div class=\"field\">\n            <label>Referral Source</label>\n            <select class=\"form-select\" aria-label=\"Default select example\">\n              <option selected>Please Select Referral Source</option>\n              <option value=\"1\">Doctors</option>\n              <option value=\"2\">Website</option>\n              <option value=\"3\">Advertisement</option>\n              <option value=\"4\">Patients</option>\n              <option value=\"5\">Insurance</option>\n              <option value=\"6\">Others</option>\n            </select>\n          </div>\n          <Field name=\"height\">\n            {({ input, meta }) => (\n              <div className=\"field\">\n                <label>Height (in cm)</label>\n                <input type=\"text\" {...input} />\n                <PointingError input = {input } meta = {meta} />\n              </div>\n            )}\n          </Field>\n          <Field name=\"bmi\">\n            {({ input, meta }) => (\n              <div className=\"field\">\n                <label>BMI</label>\n                <input type=\"text\" {...input} />\n                <PointingError input = {input } meta = {meta} />\n              </div>\n            )}\n          </Field>\n        </div>\n     \n        <div class=\"column\">\n          <div class=\"field\">\n            <label>Marital Status</label>\n            <RadioGroup row>\n              <FormControlLabel\n                label=\"Single\"\n                control={\n                  <Field\n                    name=\"status\"\n                    component={RadioComponent}\n                    type=\"radio\"\n                    value=\"single\"\n                  />\n                }\n              />\n              <FormControlLabel\n                label=\"Married\"\n                control={\n                  <Field\n                    name=\"status\"\n                    component={RadioComponent}\n                    type=\"radio\"\n                    value=\"married\"\n                  />\n                }\n              />\n            </RadioGroup>\n       \n          </div>\n        \n         \n          <Field name=\"weight\">\n            {({ input, meta }) => (\n              <div className=\"field\">\n                <label>Weight (in kg)</label>\n                <input type=\"text\" {...input} />\n                <PointingError input = {input } meta = {meta} />\n              </div>\n            )}\n          </Field>\n          {married && (\n            <div class=\"field\">\n              <label>Consanguineous Marriage</label>\n              <ButtonGroup\n                color=\"primary\"\n                aria-label=\"outlined primary button group\"\n                label=\"Consanguineous Marriage\"\n              >\n                <Button>Yes</Button>\n                <Button>No</Button>\n              </ButtonGroup>\n            </div>\n          )}\n        </div>\n      </div>\n      <div class=\"ui vertical divider\">And</div>\n    </div>\n  );\n}\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddAppointment.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddNewTreatment.jsx",["544"],"import React from \"react\";\nimport BasicContainer from \"../Container/BasicContainer\";\nimport { TextareaAutosize } from \"@material-ui/core\";\nimport { Grid } from \"@material-ui/core\";\nimport { Form, Field } from \"react-final-form\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FormControl, Select, MenuItem, InputLabel } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 200,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n    minWidth: 150,\n  },\n}));\n\nfunction AddNewTreatment(props) {\n  const classes = useStyles();\n\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n\n  const initialValues = { date: new Date().toISOString().substr(0, 10) };\n\n  return (\n    <div>\n      <div>\n        <h3 className=\"ui center aligned icon header\">\n          <i class=\"circular user md icon\"></i>\n          Add New Treatment\n        </h3>\n      </div>\n      <Form onSubmit={onSubmit} initialValues={initialValues}>\n        {({ handleSubmit, form }) => (\n          <form\n            onSubmit={handleSubmit}\n            className=\"ui form\"\n            style={{\n              height: \"70vh\",\n              width: \"30vw\",\n              margin: \"5rem\",\n            }}\n          >\n            <Grid item xs={12}>\n              <div className=\"text-center\">\n                <div className=\"item\">\n                  <label>Date</label>\n                  <Field name=\"date\" type=\"date\">\n                    {({ input, meta }) => (\n                      <div className=\"field\">\n                        <input type=\"date\" {...input} />\n                      </div>\n                    )}\n                  </Field>\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <br />\n\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <div className=\"item\">\n                  <FormControl variant=\"outlined\">\n                    <InputLabel>Modalities</InputLabel>\n                    <Field name=\"category\" type=\"select\">\n                      {({ input, meta }) => (\n                        <Select\n                          // id=\"category\"\n                          className={classes.selectEmpty}\n                          {...input}\n                          // onChange={handleChange}\n                        >\n                          {props.categories.map((category) => (\n                            <MenuItem\n                              key={category}\n                              value={category}\n                              onClick={() => {\n                                props.setTreatment(category);\n                              }}\n                            >\n                              {category}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      )}\n                    </Field>\n                  </FormControl>\n                </div>\n                <br />\n                <br />\n              </Grid>\n              <Grid item xs={6}>\n                <div className=\"item\">\n                  <FormControl variant=\"outlined\">\n                    <InputLabel>Item Name</InputLabel>\n                    <Field name=\"treatment\" type=\"select\">\n                      {({ input, meta }) => (\n                        <Select\n                          className={classes.selectEmpty}\n                          {...input}\n                          // onChange={handleChange}\n                        >\n                          {props.treatment.map((d) => (\n                            <MenuItem key={uuidv4()} value={d}>\n                              {d}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      )}\n                    </Field>\n                  </FormControl>\n                </div>\n              </Grid>\n              <br />\n              <br />\n              <Grid item xs={12}>\n                <Field name=\"price\">\n                  {({ input, meta }) => (\n                    <div className=\"field\">\n                      <label>Price</label>\n                      <input type=\"text\" {...input} placeholder=\"Price\" />\n                      {/* <PointingError input = {input } meta = {meta} /> */}\n                    </div>\n                  )}\n                </Field>\n              </Grid>\n            </Grid>\n            <br />\n            <br />\n            <Grid item xs={12}>\n              <div className=\"item\">\n                <label> Description</label>\n                <Field name=\"description\">\n                  {({ input, meta }) => (\n                    <TextareaAutosize\n                      type=\"text\"\n                      placeholder=\"Description\"\n                      {...input}\n                    />\n                  )}\n                </Field>\n              </div>\n            </Grid>\n            <br />\n            <br />\n            <div style={{ textAlign: \"center\" }}>\n              <button\n                // disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui primary button\"\n              >\n                Save\n              </button>\n              <button\n                // disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui button\"\n              >\n                Discard\n              </button>\n            </div>\n          </form>\n        )}\n      </Form>\n    </div>\n  );\n}\n\nexport default AddNewTreatment;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Diagnosis.jsx",["545","546"],"import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Form, Field } from \"react-final-form\";\nimport BasicContainer from \"../Container/BasicContainer\";\nimport { FormControl, Select, MenuItem, InputLabel } from \"@material-ui/core\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport AppointmentTable from \"../Tables/AppointmentTable\";\nimport { diagnosisTableHeading } from \"../../db\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 200,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n    minWidth: 150,\n  },\n}));\n\nfunction Diagnosis(props) {\n  const classes = useStyles();\n\n  const onSubmit = (formValues) => {\n    console.log(formValues);\n  };\n\n  const initialValues = { date: new Date().toISOString().substr(0, 10) };\n\n  const validate = (formValues) => {\n    const errors = {};\n  };\n\n  let tableData = [];\n  const diagnosisTableHeading = [\n    { id: \"date\", label: \"Date\" },\n    { id: \"category\", label: \"Category\" },\n    { id: \"diagnosis\", label: \"Diagnosis\" },\n    { id: \"actions\", label: \"Actions\" },\n  ];\n\n  const renderTable = () => {\n    return (\n      <AppointmentTable headings={diagnosisTableHeading} rows={tableData} />\n    );\n  };\n\n  return (\n    <BasicContainer>\n      <Form\n        onSubmit={onSubmit}\n        validate={validate}\n        initialValues={initialValues}\n      >\n        {({ handleSubmit }, form) => (\n          <form onSubmit={handleSubmit} className=\"ui form\">\n            <div className=\"text-center\">\n              <div className=\"field\">\n                <Grid item xs={12}>\n                  <div className=\"item\">\n                    <label>Date</label>\n                    <Field name=\"date\">\n                      {({ input, meta }) => <input type=\"date\" {...input} />}\n                    </Field>\n                  </div>\n                </Grid>\n                <Grid container spacing={1}>\n                  <Grid item xs={6}>\n                    <div className=\"item\">\n                      <FormControl variant=\"outlined\">\n                        <InputLabel>Category</InputLabel>\n                        <Field name=\"category\" type=\"select\">\n                          {({ input, meta }) => (\n                            <Select\n                              // id=\"category\"\n                              className={classes.selectEmpty}\n                              {...input}\n                              // onChange={handleChange}\n                            >\n                              {props.categories.map((category) => (\n                                <MenuItem\n                                  key={category}\n                                  value={category}\n                                  onClick={() => {\n                                    props.setCategory(category);\n                                  }}\n                                >\n                                  {category}\n                                </MenuItem>\n                              ))}\n                            </Select>\n                          )}\n                        </Field>\n                      </FormControl>\n                    </div>\n                    <div className=\"item\">\n                      <FormControl variant=\"outlined\">\n                        <InputLabel>Diagnosis</InputLabel>\n                        <Field name=\"diagnosis\" type=\"select\">\n                          {({ input, meta }) => (\n                            <Select\n                              // id=\"daignosis\"\n                              className={classes.selectEmpty}\n                              {...input}\n                              // onChange={handleChange}\n                              label=\"Select Diagnosis\"\n                            >\n                              {props.diagnosis.map((d) => (\n                                <MenuItem key={uuidv4()} value={d}>\n                                  {d}\n                                </MenuItem>\n                              ))}\n                            </Select>\n                          )}\n                        </Field>\n                      </FormControl>\n                    </div>\n                  </Grid>\n                </Grid>\n              </div>\n\n              <div style={{ textAlign: \"center\" }}>\n                <button className=\"ui primary button\">Submit</button>\n              </div>\n            </div>\n          </form>\n        )}\n      </Form>\n      <br />\n      <br />\n      <div>{renderTable()}</div>\n    </BasicContainer>\n  );\n}\n\nexport default Diagnosis;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\AddPatient.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\actions\\treatmentAction.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\TreatmentForm.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\Paper\\paper.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\components\\LandingPage\\Login\\Login.jsx",["547"],"import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport Validator from \"validator\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../../actions/userAction\";\nimport PointingError from \"../ErrorComponent/PointingError\";\n\n\nconst Login = (props) => {\n  const onSubmit = (formValues) => {\n    props.login(formValues);\n    console.log(formValues);\n  };\n\n  const validate = (formValues) => {\n    const errors = {};\n    // email\n\n    if (formValues.email && !Validator.isEmail(formValues.email))\n      errors.email = \"Enter correct email\";\n    if (!formValues.email) errors.email = \"Email should not be empty\";\n    if (formValues.password && formValues.password.length < 5)\n      errors.password = \"Password should be at minimum of 5 character long\";\n    if (!formValues.password) errors.password = \"Password should not be empty\";\n    return errors;\n  };\n  const renderError = (input, meta) => {\n    // console.log(input);\n    if (meta.touched && meta.error)\n      return <div className=\"ui pointing red basic label\">{meta.error}</div>;\n    else if (props.errors && props.errors[input.name])\n      return (\n\n        <div className=\"ui pointing red basic label\">\n          {props.errors[input.name]}\n        </div>\n      );\n\n    return undefined;\n  };\n\n  return (\n    <Form onSubmit={onSubmit} validate={validate}>\n      {({ handleSubmit, errors, submitting, form }) => (\n        <div>\n          <form\n            onSubmit={\n              handleSubmit\n              // form.reset();\n            }\n            className=\"ui fluid form error\"\n          >\n            <Field name=\"email\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Email</label>\n                  <input type=\"text\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"password\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Password</label>\n                  <input type=\"password\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            <div>\n              <button\n                disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui button primary form-button\"\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n    </Form>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nexport default connect(mapStateToProps, { login })(Login);\n// export default Login;\n","D:\\physiomatic\\dashboard-main\\src\\components\\LandingPage\\Register\\Register.jsx",["548","549"],"import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport Validator from \"validator\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { register } from \"../../../actions/userAction\";\nimport PointingError from \"../ErrorComponent/PointingError\";\n\nimport { makeMaskFromFormat } from \"@material-ui/pickers/_helpers/text-field-helper\";\n// import { register } from \"../../actions/authActions\";\n// import DateFnsUtils from \"@date-io/date-fns\";\n// import \"date-fns\";\n// import {\n//   MuiPickersUtilsProvider,\n//   KeyboardDatePicker,\n// } from \"@material-ui/pickers\";\n\nconst Register = (props) => {\n  // const [dob, setDOB] = React.useState(new Date(\"01/01/1990\"));\n  // const [dateErr, setDateError] = React.useState();\n  // const dateValidation = (error) => {\n  //   if (!dateErr) {\n  //     if (new Date().getFullYear() - new Date(dob).getFullYear() < 10)\n  //       setDateError(\"Too young minimum age 10\");\n  //   }\n  //   setDateError(error);\n  // };\n\n  const onSubmit = (formValues) => {\n    props.register(formValues);\n    console.log(formValues);\n  };\n\n  const validate = (formValues) => {\n    const errors = {};\n    // email\n    if (!formValues.name) errors.name = \"Name is required\";\n    if (formValues.email && !Validator.isEmail(formValues.email))\n      errors.email = \"Enter correct email\";\n    if (!formValues.email) errors.email = \"Email is required\";\n    // password\n    if (formValues.password && formValues.password.length < 5)\n      errors.password = \"Password should be at minimum of 5 character long\";\n    if (!formValues.password) errors.password = \"Password is required\";\n\n    //confirm Password\n    if (formValues.password !== formValues.confirmPassword)\n      errors.confirmPassword = \"password and confirm password must be same\";\n    if (!formValues.confirmPassword)\n      errors.confirmPassword = \"confirm password is required\";\n\n    // mobile\n    if (formValues.mobile && !Validator.isDecimal(formValues.mobile))\n      errors.mobile = \"Only numerical values allowed\";\n      if (!formValues.mobile) errors.mobile = \"Mobile is required\";\n    //landline\n    // if (formValues.landline && !Validator.isDecimal(formValues.landline))\n    //   errors.landline = \"Only numerical values allowed\";\n    //clinic name\n    if (!formValues.clinicName) errors.clinicName = \"Clinic Name is required\";\n    //address\n    if (formValues.address && formValues.address.length < 5)\n      errors.address = \"Address should me minimum 5 characters long\";\n    if (!formValues.address) errors.address = \"Address is required\";\n    //country\n    if (formValues.country && Validator.isEmpty(formValues.country))\n      errors.country = \"Select a country name\";\n\n    return errors;\n  };\n  const renderError = (meta) => {\n    if (meta.touched && meta.error)\n      return <div className=\"ui pointing red basic label\">{meta.error}</div>;\n    return undefined;\n  };\n\n  return (\n    <Form onSubmit={onSubmit} validate={validate}>\n      {({ handleSubmit, errors, submitting, form }) => (\n        <div>\n          <form\n            onSubmit={(evt) => {\n              handleSubmit(evt);\n              form.reset();\n            }}\n            className=\"ui fluid form error\"\n          >\n            <Field name=\"name\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Name</label>\n                  <input type=\"text\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"email\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Email</label>\n                  <input type=\"text\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"password\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Password</label>\n                  <input type=\"password\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"confirmPassword\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Confirm Password</label>\n                  <input type=\"password\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"mobile\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Mobile</label>\n                  <input type=\"text\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"landline\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>landline</label>\n                  <input type=\"text\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n\n            <Field name=\"clinicName\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>ClinicName</label>\n                  <input type=\"text\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            <Field name=\"address\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Address</label>\n                  <input type=\"text\" {...input} autoComplete=\"off\" />\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            {/* <Field name=\"address\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Address</label>\n                  <input type=\"password\" {...input} autoComplete=\"off\" />\n                  {renderError(meta)}\n                </div>\n              )}\n            </Field> */}\n\n            <Field name=\"country\">\n              {({ input, meta }) => (\n                <div className=\"field\">\n                  <label>Country</label>\n                  <select id=\"country\" name=\"country\" {...input}>\n                    <option value=\"Select Country\">Select Country</option>\n\n                    <option value=\"Afghanistan\">Afghanistan</option>\n                    <option value=\"Albania\">Albania</option>\n                    <option value=\"Algeria\">Algeria</option>\n                    <option value=\"American Samoa\">American Samoa</option>\n                    <option value=\"Andorra\">Andorra</option>\n                    <option value=\"Angola\">Angola</option>\n                    <option value=\"Anguilla\">Anguilla</option>\n                    <option value=\"Antartica\">Antarctica</option>\n                    <option value=\"Antigua and Barbuda\">\n                      Antigua and Barbuda\n                    </option>\n                    <option value=\"Argentina\">Argentina</option>\n                    <option value=\"Armenia\">Armenia</option>\n                    <option value=\"Aruba\">Aruba</option>\n                    <option value=\"Australia\">Australia</option>\n                    <option value=\"Austria\">Austria</option>\n                    <option value=\"Azerbaijan\">Azerbaijan</option>\n                    <option value=\"Bahamas\">Bahamas</option>\n                    <option value=\"Bahrain\">Bahrain</option>\n                    <option value=\"Bangladesh\">Bangladesh</option>\n                    <option value=\"Barbados\">Barbados</option>\n                    <option value=\"Belarus\">Belarus</option>\n                    <option value=\"Belgium\">Belgium</option>\n                    <option value=\"Belize\">Belize</option>\n                    <option value=\"Benin\">Benin</option>\n                    <option value=\"Bermuda\">Bermuda</option>\n                    <option value=\"Bhutan\">Bhutan</option>\n                    <option value=\"Bolivia\">Bolivia</option>\n                    <option value=\"Bosnia and Herzegowina\">\n                      Bosnia and Herzegowina\n                    </option>\n                    <option value=\"Botswana\">Botswana</option>\n                    <option value=\"Bouvet Island\">Bouvet Island</option>\n                    <option value=\"Brazil\">Brazil</option>\n                    <option value=\"British Indian Ocean Territory\">\n                      British Indian Ocean Territory\n                    </option>\n                    <option value=\"Brunei Darussalam\">Brunei Darussalam</option>\n                    <option value=\"Bulgaria\">Bulgaria</option>\n                    <option value=\"Burkina Faso\">Burkina Faso</option>\n                    <option value=\"Burundi\">Burundi</option>\n                    <option value=\"Cambodia\">Cambodia</option>\n                    <option value=\"Cameroon\">Cameroon</option>\n                    <option value=\"Canada\">Canada</option>\n                    <option value=\"Cape Verde\">Cape Verde</option>\n                    <option value=\"Cayman Islands\">Cayman Islands</option>\n                    <option value=\"Central African Republic\">\n                      Central African Republic\n                    </option>\n                    <option value=\"Chad\">Chad</option>\n                    <option value=\"Chile\">Chile</option>\n                    <option value=\"China\">China</option>\n                    <option value=\"Christmas Island\">Christmas Island</option>\n                    <option value=\"Cocos Islands\">\n                      Cocos (Keeling) Islands\n                    </option>\n                    <option value=\"Colombia\">Colombia</option>\n                    <option value=\"Comoros\">Comoros</option>\n                    <option value=\"Congo\">Congo</option>\n                    <option value=\"Congo\">\n                      Congo, the Democratic Republic of the\n                    </option>\n                    <option value=\"Cook Islands\">Cook Islands</option>\n                    <option value=\"Costa Rica\">Costa Rica</option>\n                    <option value=\"Cota D'Ivoire\">Cote d'Ivoire</option>\n                    <option value=\"Croatia\">Croatia (Hrvatska)</option>\n                    <option value=\"Cuba\">Cuba</option>\n                    <option value=\"Cyprus\">Cyprus</option>\n                    <option value=\"Czech Republic\">Czech Republic</option>\n                    <option value=\"Denmark\">Denmark</option>\n                    <option value=\"Djibouti\">Djibouti</option>\n                    <option value=\"Dominica\">Dominica</option>\n                    <option value=\"Dominican Republic\">\n                      Dominican Republic\n                    </option>\n                    <option value=\"East Timor\">East Timor</option>\n                    <option value=\"Ecuador\">Ecuador</option>\n                    <option value=\"Egypt\">Egypt</option>\n                    <option value=\"El Salvador\">El Salvador</option>\n                    <option value=\"Equatorial Guinea\">Equatorial Guinea</option>\n                    <option value=\"Eritrea\">Eritrea</option>\n                    <option value=\"Estonia\">Estonia</option>\n                    <option value=\"Ethiopia\">Ethiopia</option>\n                    <option value=\"Falkland Islands\">\n                      Falkland Islands (Malvinas)\n                    </option>\n                    <option value=\"Faroe Islands\">Faroe Islands</option>\n                    <option value=\"Fiji\">Fiji</option>\n                    <option value=\"Finland\">Finland</option>\n                    <option value=\"France\">France</option>\n                    <option value=\"France Metropolitan\">\n                      France, Metropolitan\n                    </option>\n                    <option value=\"French Guiana\">French Guiana</option>\n                    <option value=\"French Polynesia\">French Polynesia</option>\n                    <option value=\"French Southern Territories\">\n                      French Southern Territories\n                    </option>\n                    <option value=\"Gabon\">Gabon</option>\n                    <option value=\"Gambia\">Gambia</option>\n                    <option value=\"Georgia\">Georgia</option>\n                    <option value=\"Germany\">Germany</option>\n                    <option value=\"Ghana\">Ghana</option>\n                    <option value=\"Gibraltar\">Gibraltar</option>\n                    <option value=\"Greece\">Greece</option>\n                    <option value=\"Greenland\">Greenland</option>\n                    <option value=\"Grenada\">Grenada</option>\n                    <option value=\"Guadeloupe\">Guadeloupe</option>\n                    <option value=\"Guam\">Guam</option>\n                    <option value=\"Guatemala\">Guatemala</option>\n                    <option value=\"Guinea\">Guinea</option>\n                    <option value=\"Guinea-Bissau\">Guinea-Bissau</option>\n                    <option value=\"Guyana\">Guyana</option>\n                    <option value=\"Haiti\">Haiti</option>\n                    <option value=\"Heard and McDonald Islands\">\n                      Heard and Mc Donald Islands\n                    </option>\n                    <option value=\"Holy See\">\n                      Holy See (Vatican City State)\n                    </option>\n                    <option value=\"Honduras\">Honduras</option>\n                    <option value=\"Hong Kong\">Hong Kong</option>\n                    <option value=\"Hungary\">Hungary</option>\n                    <option value=\"Iceland\">Iceland</option>\n                    <option value=\"India\">India</option>\n                    <option value=\"Indonesia\">Indonesia</option>\n                    <option value=\"Iran\">Iran (Islamic Republic of)</option>\n                    <option value=\"Iraq\">Iraq</option>\n                    <option value=\"Ireland\">Ireland</option>\n                    <option value=\"Israel\">Israel</option>\n                    <option value=\"Italy\">Italy</option>\n                    <option value=\"Jamaica\">Jamaica</option>\n                    <option value=\"Japan\">Japan</option>\n                    <option value=\"Jordan\">Jordan</option>\n                    <option value=\"Kazakhstan\">Kazakhstan</option>\n                    <option value=\"Kenya\">Kenya</option>\n                    <option value=\"Kiribati\">Kiribati</option>\n                    <option value=\"Democratic People's Republic of Korea\">\n                      Korea, Democratic People's Republic of\n                    </option>\n                    <option value=\"Korea\">Korea, Republic of</option>\n                    <option value=\"Kuwait\">Kuwait</option>\n                    <option value=\"Kyrgyzstan\">Kyrgyzstan</option>\n                    <option value=\"Lao\">\n                      Lao People's Democratic Republic\n                    </option>\n                    <option value=\"Latvia\">Latvia</option>\n                    <option value=\"Lebanon\" selected>\n                      Lebanon\n                    </option>\n                    <option value=\"Lesotho\">Lesotho</option>\n                    <option value=\"Liberia\">Liberia</option>\n                    <option value=\"Libyan Arab Jamahiriya\">\n                      Libyan Arab Jamahiriya\n                    </option>\n                    <option value=\"Liechtenstein\">Liechtenstein</option>\n                    <option value=\"Lithuania\">Lithuania</option>\n                    <option value=\"Luxembourg\">Luxembourg</option>\n                    <option value=\"Macau\">Macau</option>\n                    <option value=\"Macedonia\">\n                      Macedonia, The Former Yugoslav Republic of\n                    </option>\n                    <option value=\"Madagascar\">Madagascar</option>\n                    <option value=\"Malawi\">Malawi</option>\n                    <option value=\"Malaysia\">Malaysia</option>\n                    <option value=\"Maldives\">Maldives</option>\n                    <option value=\"Mali\">Mali</option>\n                    <option value=\"Malta\">Malta</option>\n                    <option value=\"Marshall Islands\">Marshall Islands</option>\n                    <option value=\"Martinique\">Martinique</option>\n                    <option value=\"Mauritania\">Mauritania</option>\n                    <option value=\"Mauritius\">Mauritius</option>\n                    <option value=\"Mayotte\">Mayotte</option>\n                    <option value=\"Mexico\">Mexico</option>\n                    <option value=\"Micronesia\">\n                      Micronesia, Federated States of\n                    </option>\n                    <option value=\"Moldova\">Moldova, Republic of</option>\n                    <option value=\"Monaco\">Monaco</option>\n                    <option value=\"Mongolia\">Mongolia</option>\n                    <option value=\"Montserrat\">Montserrat</option>\n                    <option value=\"Morocco\">Morocco</option>\n                    <option value=\"Mozambique\">Mozambique</option>\n                    <option value=\"Myanmar\">Myanmar</option>\n                    <option value=\"Namibia\">Namibia</option>\n                    <option value=\"Nauru\">Nauru</option>\n                    <option value=\"Nepal\">Nepal</option>\n                    <option value=\"Netherlands\">Netherlands</option>\n                    <option value=\"Netherlands Antilles\">\n                      Netherlands Antilles\n                    </option>\n                    <option value=\"New Caledonia\">New Caledonia</option>\n                    <option value=\"New Zealand\">New Zealand</option>\n                    <option value=\"Nicaragua\">Nicaragua</option>\n                    <option value=\"Niger\">Niger</option>\n                    <option value=\"Nigeria\">Nigeria</option>\n                    <option value=\"Niue\">Niue</option>\n                    <option value=\"Norfolk Island\">Norfolk Island</option>\n                    <option value=\"Northern Mariana Islands\">\n                      Northern Mariana Islands\n                    </option>\n                    <option value=\"Norway\">Norway</option>\n                    <option value=\"Oman\">Oman</option>\n                    <option value=\"Pakistan\">Pakistan</option>\n                    <option value=\"Palau\">Palau</option>\n                    <option value=\"Panama\">Panama</option>\n                    <option value=\"Papua New Guinea\">Papua New Guinea</option>\n                    <option value=\"Paraguay\">Paraguay</option>\n                    <option value=\"Peru\">Peru</option>\n                    <option value=\"Philippines\">Philippines</option>\n                    <option value=\"Pitcairn\">Pitcairn</option>\n                    <option value=\"Poland\">Poland</option>\n                    <option value=\"Portugal\">Portugal</option>\n                    <option value=\"Puerto Rico\">Puerto Rico</option>\n                    <option value=\"Qatar\">Qatar</option>\n                    <option value=\"Reunion\">Reunion</option>\n                    <option value=\"Romania\">Romania</option>\n                    <option value=\"Russia\">Russian Federation</option>\n                    <option value=\"Rwanda\">Rwanda</option>\n                    <option value=\"Saint Kitts and Nevis\">\n                      Saint Kitts and Nevis\n                    </option>\n                    <option value=\"Saint LUCIA\">Saint LUCIA</option>\n                    <option value=\"Saint Vincent\">\n                      Saint Vincent and the Grenadines\n                    </option>\n                    <option value=\"Samoa\">Samoa</option>\n                    <option value=\"San Marino\">San Marino</option>\n                    <option value=\"Sao Tome and Principe\">\n                      Sao Tome and Principe\n                    </option>\n                    <option value=\"Saudi Arabia\">Saudi Arabia</option>\n                    <option value=\"Senegal\">Senegal</option>\n                    <option value=\"Seychelles\">Seychelles</option>\n                    <option value=\"Sierra\">Sierra Leone</option>\n                    <option value=\"Singapore\">Singapore</option>\n                    <option value=\"Slovakia\">Slovakia (Slovak Republic)</option>\n                    <option value=\"Slovenia\">Slovenia</option>\n                    <option value=\"Solomon Islands\">Solomon Islands</option>\n                    <option value=\"Somalia\">Somalia</option>\n                    <option value=\"South Africa\">South Africa</option>\n                    <option value=\"South Georgia\">\n                      South Georgia and the South Sandwich Islands\n                    </option>\n                    <option value=\"Span\">Spain</option>\n                    <option value=\"SriLanka\">Sri Lanka</option>\n                    <option value=\"St. Helena\">St. Helena</option>\n                    <option value=\"St. Pierre and Miguelon\">\n                      St. Pierre and Miquelon\n                    </option>\n                    <option value=\"Sudan\">Sudan</option>\n                    <option value=\"Suriname\">Suriname</option>\n                    <option value=\"Svalbard\">\n                      Svalbard and Jan Mayen Islands\n                    </option>\n                    <option value=\"Swaziland\">Swaziland</option>\n                    <option value=\"Sweden\">Sweden</option>\n                    <option value=\"Switzerland\">Switzerland</option>\n                    <option value=\"Syria\">Syrian Arab Republic</option>\n                    <option value=\"Taiwan\">Taiwan, Province of China</option>\n                    <option value=\"Tajikistan\">Tajikistan</option>\n                    <option value=\"Tanzania\">\n                      Tanzania, United Republic of\n                    </option>\n                    <option value=\"Thailand\">Thailand</option>\n                    <option value=\"Togo\">Togo</option>\n                    <option value=\"Tokelau\">Tokelau</option>\n                    <option value=\"Tonga\">Tonga</option>\n                    <option value=\"Trinidad and Tobago\">\n                      Trinidad and Tobago\n                    </option>\n                    <option value=\"Tunisia\">Tunisia</option>\n                    <option value=\"Turkey\">Turkey</option>\n                    <option value=\"Turkmenistan\">Turkmenistan</option>\n                    <option value=\"Turks and Caicos\">\n                      Turks and Caicos Islands\n                    </option>\n                    <option value=\"Tuvalu\">Tuvalu</option>\n                    <option value=\"Uganda\">Uganda</option>\n                    <option value=\"Ukraine\">Ukraine</option>\n                    <option value=\"United Arab Emirates\">\n                      United Arab Emirates\n                    </option>\n                    <option value=\"United Kingdom\">United Kingdom</option>\n                    <option value=\"United States\">United States</option>\n                    <option value=\"United States Minor Outlying Islands\">\n                      United States Minor Outlying Islands\n                    </option>\n                    <option value=\"Uruguay\">Uruguay</option>\n                    <option value=\"Uzbekistan\">Uzbekistan</option>\n                    <option value=\"Vanuatu\">Vanuatu</option>\n                    <option value=\"Venezuela\">Venezuela</option>\n                    <option value=\"Vietnam\">Viet Nam</option>\n                    <option value=\"Virgin Islands (British)\">\n                      Virgin Islands (British)\n                    </option>\n                    <option value=\"Virgin Islands (U.S)\">\n                      Virgin Islands (U.S.)\n                    </option>\n                    <option value=\"Wallis and Futana Islands\">\n                      Wallis and Futuna Islands\n                    </option>\n                    <option value=\"Western Sahara\">Western Sahara</option>\n                    <option value=\"Yemen\">Yemen</option>\n                    <option value=\"Serbia\">Serbia</option>\n                    <option value=\"Zambia\">Zambia</option>\n                    <option value=\"Zimbabwe\">Zimbabwe</option>\n                  </select>\n                  <PointingError input = {input } meta = {meta} />\n                </div>\n              )}\n            </Field>\n            {/* <div className=\"field\">\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"dd/MM/yyyy\"\n                  margin=\"normal\"\n                  id=\"date-picker-inline\"\n                  label=\"Date Of Birth\"\n                  value={dob}\n                  onChange={(date) => {\n                    setDOB(date);\n                  }}\n                  KeyboardButtonProps={{\n                    \"aria-label\": \"change date\",\n                  }}\n                  onError={dateValidation}\n                  \n                />\n              </MuiPickersUtilsProvider> */}\n            {/* </div> */}\n\n            <div>\n              <button\n                disabled={!_.isEmpty(errors) || submitting}\n                className=\"ui button primary form-button\"\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n    </Form>\n  );\n};\n\nexport default connect(null, { register })(Register);\n// export default Register;\n","D:\\physiomatic\\dashboard-main\\src\\components\\Forms\\Assessments\\Motor.jsx",["550","551"],"D:\\physiomatic\\dashboard-main\\src\\actions\\demographicAction.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\demographicDataReducer.jsx",[],"D:\\physiomatic\\dashboard-main\\src\\reducers\\motorExaminationReducer.jsx",["552"],"import { ADD_MOTOR_DATA, GET_DEMOGRAPHIC_DATA_BY_ID, GET_MOTOR_DATA, GET_MOTOR_DATA_BY_ID } from \"../actions/types\";\r\n\r\nexport const motorData = (state = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_MOTOR_DATA:\r\n            const data = state.map((dt) => {\r\n                return dt;\r\n\r\n            });\r\n            data.push(action.payload);\r\n            return data;\r\n\r\n        case GET_MOTOR_DATA:\r\n            const motorDataAll = state.map((dt) => {\r\n                return dt;\r\n\r\n            });\r\n            motorDataAll.push(action.payload);\r\n            return motorDataAll;\r\n\r\n        case GET_DEMOGRAPHIC_DATA_BY_ID:\r\n            const motorDataOne = state.map((dt) => {\r\n                return dt;\r\n\r\n            });\r\n            motorDataOne.push(action.payload);\r\n            return motorDataOne;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n};","D:\\physiomatic\\dashboard-main\\src\\actions\\motorExaminationAction.jsx",[],{"ruleId":"553","replacedBy":"554"},{"ruleId":"555","replacedBy":"556"},{"ruleId":"557","severity":1,"message":"558","line":21,"column":8,"nodeType":"559","messageId":"560","endLine":21,"endColumn":19},{"ruleId":"557","severity":1,"message":"561","line":23,"column":8,"nodeType":"559","messageId":"560","endLine":23,"endColumn":23},{"ruleId":"557","severity":1,"message":"562","line":24,"column":8,"nodeType":"559","messageId":"560","endLine":24,"endColumn":15},{"ruleId":"557","severity":1,"message":"563","line":25,"column":8,"nodeType":"559","messageId":"560","endLine":25,"endColumn":12},{"ruleId":"557","severity":1,"message":"564","line":26,"column":8,"nodeType":"559","messageId":"560","endLine":26,"endColumn":15},{"ruleId":"557","severity":1,"message":"565","line":5,"column":8,"nodeType":"559","messageId":"560","endLine":5,"endColumn":22},{"ruleId":"557","severity":1,"message":"566","line":32,"column":11,"nodeType":"559","messageId":"560","endLine":32,"endColumn":19},{"ruleId":"557","severity":1,"message":"567","line":143,"column":10,"nodeType":"559","messageId":"560","endLine":143,"endColumn":19},{"ruleId":"557","severity":1,"message":"568","line":143,"column":21,"nodeType":"559","messageId":"560","endLine":143,"endColumn":33},{"ruleId":"557","severity":1,"message":"569","line":9,"column":8,"nodeType":"559","messageId":"560","endLine":9,"endColumn":24},{"ruleId":"557","severity":1,"message":"570","line":12,"column":10,"nodeType":"559","messageId":"560","endLine":12,"endColumn":23},{"ruleId":"557","severity":1,"message":"571","line":20,"column":3,"nodeType":"559","messageId":"560","endLine":20,"endColumn":11},{"ruleId":"557","severity":1,"message":"572","line":21,"column":3,"nodeType":"559","messageId":"560","endLine":21,"endColumn":12},{"ruleId":"557","severity":1,"message":"573","line":24,"column":3,"nodeType":"559","messageId":"560","endLine":24,"endColumn":7},{"ruleId":"557","severity":1,"message":"574","line":25,"column":3,"nodeType":"559","messageId":"560","endLine":25,"endColumn":8},{"ruleId":"557","severity":1,"message":"575","line":26,"column":3,"nodeType":"559","messageId":"560","endLine":26,"endColumn":8},{"ruleId":"557","severity":1,"message":"576","line":27,"column":3,"nodeType":"559","messageId":"560","endLine":27,"endColumn":8},{"ruleId":"577","severity":1,"message":"578","line":60,"column":6,"nodeType":"579","endLine":60,"endColumn":8,"suggestions":"580"},{"ruleId":"557","severity":1,"message":"581","line":6,"column":3,"nodeType":"559","messageId":"560","endLine":6,"endColumn":24},{"ruleId":"557","severity":1,"message":"582","line":7,"column":3,"nodeType":"559","messageId":"560","endLine":7,"endColumn":30},{"ruleId":"557","severity":1,"message":"583","line":8,"column":3,"nodeType":"559","messageId":"560","endLine":8,"endColumn":33},{"ruleId":"557","severity":1,"message":"584","line":7,"column":8,"nodeType":"559","messageId":"560","endLine":7,"endColumn":15},{"ruleId":"557","severity":1,"message":"585","line":5,"column":10,"nodeType":"559","messageId":"560","endLine":5,"endColumn":22},{"ruleId":"557","severity":1,"message":"586","line":6,"column":8,"nodeType":"559","messageId":"560","endLine":6,"endColumn":25},{"ruleId":"557","severity":1,"message":"587","line":4,"column":32,"nodeType":"559","messageId":"560","endLine":4,"endColumn":49},{"ruleId":"577","severity":1,"message":"578","line":11,"column":6,"nodeType":"579","endLine":11,"endColumn":8,"suggestions":"588"},{"ruleId":"557","severity":1,"message":"589","line":5,"column":8,"nodeType":"559","messageId":"560","endLine":5,"endColumn":9},{"ruleId":"557","severity":1,"message":"590","line":51,"column":9,"nodeType":"559","messageId":"560","endLine":51,"endColumn":20},{"ruleId":"557","severity":1,"message":"591","line":2,"column":16,"nodeType":"559","messageId":"560","endLine":2,"endColumn":32},{"ruleId":"557","severity":1,"message":"592","line":2,"column":34,"nodeType":"559","messageId":"560","endLine":2,"endColumn":39},{"ruleId":"557","severity":1,"message":"593","line":7,"column":8,"nodeType":"559","messageId":"560","endLine":7,"endColumn":21},{"ruleId":"557","severity":1,"message":"594","line":23,"column":11,"nodeType":"559","messageId":"560","endLine":23,"endColumn":17},{"ruleId":"557","severity":1,"message":"591","line":2,"column":16,"nodeType":"559","messageId":"560","endLine":2,"endColumn":32},{"ruleId":"557","severity":1,"message":"592","line":2,"column":34,"nodeType":"559","messageId":"560","endLine":2,"endColumn":39},{"ruleId":"557","severity":1,"message":"595","line":5,"column":8,"nodeType":"559","messageId":"560","endLine":5,"endColumn":22},{"ruleId":"557","severity":1,"message":"596","line":11,"column":10,"nodeType":"559","messageId":"560","endLine":11,"endColumn":25},{"ruleId":"577","severity":1,"message":"578","line":33,"column":6,"nodeType":"579","endLine":33,"endColumn":8,"suggestions":"597"},{"ruleId":"557","severity":1,"message":"598","line":64,"column":10,"nodeType":"559","messageId":"560","endLine":64,"endColumn":18},{"ruleId":"557","severity":1,"message":"599","line":5,"column":8,"nodeType":"559","messageId":"560","endLine":5,"endColumn":14},{"ruleId":"557","severity":1,"message":"600","line":6,"column":8,"nodeType":"559","messageId":"560","endLine":6,"endColumn":19},{"ruleId":"557","severity":1,"message":"601","line":9,"column":8,"nodeType":"559","messageId":"560","endLine":9,"endColumn":22},{"ruleId":"557","severity":1,"message":"602","line":14,"column":11,"nodeType":"559","messageId":"560","endLine":14,"endColumn":19},{"ruleId":"557","severity":1,"message":"603","line":29,"column":10,"nodeType":"559","messageId":"560","endLine":29,"endColumn":14},{"ruleId":"557","severity":1,"message":"604","line":29,"column":16,"nodeType":"559","messageId":"560","endLine":29,"endColumn":23},{"ruleId":"605","severity":1,"message":"606","line":68,"column":22,"nodeType":"607","messageId":"608","endLine":68,"endColumn":24},{"ruleId":"605","severity":1,"message":"606","line":77,"column":24,"nodeType":"607","messageId":"608","endLine":77,"endColumn":26},{"ruleId":"557","severity":1,"message":"591","line":2,"column":16,"nodeType":"559","messageId":"560","endLine":2,"endColumn":32},{"ruleId":"557","severity":1,"message":"592","line":2,"column":34,"nodeType":"559","messageId":"560","endLine":2,"endColumn":39},{"ruleId":"557","severity":1,"message":"595","line":4,"column":8,"nodeType":"559","messageId":"560","endLine":4,"endColumn":22},{"ruleId":"557","severity":1,"message":"609","line":4,"column":3,"nodeType":"559","messageId":"560","endLine":4,"endColumn":21},{"ruleId":"557","severity":1,"message":"589","line":6,"column":8,"nodeType":"559","messageId":"560","endLine":6,"endColumn":9},{"ruleId":"557","severity":1,"message":"610","line":44,"column":10,"nodeType":"559","messageId":"560","endLine":44,"endColumn":17},{"ruleId":"557","severity":1,"message":"611","line":45,"column":9,"nodeType":"559","messageId":"560","endLine":45,"endColumn":23},{"ruleId":"557","severity":1,"message":"590","line":38,"column":9,"nodeType":"559","messageId":"560","endLine":38,"endColumn":20},{"ruleId":"557","severity":1,"message":"593","line":3,"column":8,"nodeType":"559","messageId":"560","endLine":3,"endColumn":21},{"ruleId":"557","severity":1,"message":"593","line":5,"column":8,"nodeType":"559","messageId":"560","endLine":5,"endColumn":21},{"ruleId":"557","severity":1,"message":"590","line":42,"column":9,"nodeType":"559","messageId":"560","endLine":42,"endColumn":20},{"ruleId":"557","severity":1,"message":"612","line":1,"column":17,"nodeType":"559","messageId":"560","endLine":1,"endColumn":25},{"ruleId":"557","severity":1,"message":"613","line":6,"column":12,"nodeType":"559","messageId":"560","endLine":6,"endColumn":24},{"ruleId":"614","severity":1,"message":"615","line":30,"column":93,"nodeType":"616","messageId":"617","endLine":30,"endColumn":106},{"ruleId":"557","severity":1,"message":"618","line":3,"column":8,"nodeType":"559","messageId":"560","endLine":3,"endColumn":16},{"ruleId":"619","severity":1,"message":"620","line":12,"column":13,"nodeType":"621","endLine":12,"endColumn":47},{"ruleId":"557","severity":1,"message":"593","line":5,"column":8,"nodeType":"559","messageId":"560","endLine":5,"endColumn":21},{"ruleId":"557","severity":1,"message":"622","line":42,"column":9,"nodeType":"559","messageId":"560","endLine":42,"endColumn":13},{"ruleId":"557","severity":1,"message":"589","line":5,"column":8,"nodeType":"559","messageId":"560","endLine":5,"endColumn":9},{"ruleId":"557","severity":1,"message":"590","line":38,"column":9,"nodeType":"559","messageId":"560","endLine":38,"endColumn":20},{"ruleId":"614","severity":1,"message":"615","line":92,"column":43,"nodeType":"616","messageId":"617","endLine":92,"endColumn":56},{"ruleId":"614","severity":1,"message":"615","line":96,"column":21,"nodeType":"616","messageId":"617","endLine":96,"endColumn":33},{"ruleId":"557","severity":1,"message":"623","line":9,"column":8,"nodeType":"559","messageId":"560","endLine":9,"endColumn":17},{"ruleId":"557","severity":1,"message":"624","line":10,"column":10,"nodeType":"559","messageId":"560","endLine":10,"endColumn":18},{"ruleId":"557","severity":1,"message":"590","line":62,"column":9,"nodeType":"559","messageId":"560","endLine":62,"endColumn":20},{"ruleId":"577","severity":1,"message":"578","line":25,"column":6,"nodeType":"579","endLine":25,"endColumn":8,"suggestions":"625"},{"ruleId":"557","severity":1,"message":"595","line":2,"column":8,"nodeType":"559","messageId":"560","endLine":2,"endColumn":22},{"ruleId":"557","severity":1,"message":"626","line":3,"column":10,"nodeType":"559","messageId":"560","endLine":3,"endColumn":26},{"ruleId":"557","severity":1,"message":"627","line":14,"column":10,"nodeType":"559","messageId":"560","endLine":14,"endColumn":18},{"ruleId":"577","severity":1,"message":"628","line":23,"column":6,"nodeType":"579","endLine":23,"endColumn":8,"suggestions":"629"},{"ruleId":"630","severity":1,"message":"631","line":69,"column":38,"nodeType":"632","messageId":"633","endLine":71,"endColumn":8},{"ruleId":"557","severity":1,"message":"595","line":2,"column":8,"nodeType":"559","messageId":"560","endLine":2,"endColumn":22},{"ruleId":"557","severity":1,"message":"623","line":5,"column":8,"nodeType":"559","messageId":"560","endLine":5,"endColumn":17},{"ruleId":"557","severity":1,"message":"634","line":19,"column":3,"nodeType":"559","messageId":"560","endLine":19,"endColumn":11},{"ruleId":"557","severity":1,"message":"635","line":25,"column":10,"nodeType":"559","messageId":"560","endLine":25,"endColumn":18},{"ruleId":"557","severity":1,"message":"636","line":25,"column":20,"nodeType":"559","messageId":"560","endLine":25,"endColumn":30},{"ruleId":"577","severity":1,"message":"578","line":61,"column":6,"nodeType":"579","endLine":61,"endColumn":8,"suggestions":"637"},{"ruleId":"614","severity":1,"message":"615","line":24,"column":69,"nodeType":"616","messageId":"617","endLine":24,"endColumn":98},{"ruleId":"557","severity":1,"message":"638","line":16,"column":9,"nodeType":"559","messageId":"560","endLine":16,"endColumn":14},{"ruleId":"557","severity":1,"message":"623","line":4,"column":8,"nodeType":"559","messageId":"560","endLine":4,"endColumn":17},{"ruleId":"557","severity":1,"message":"589","line":5,"column":8,"nodeType":"559","messageId":"560","endLine":5,"endColumn":9},{"ruleId":"557","severity":1,"message":"639","line":5,"column":10,"nodeType":"559","messageId":"560","endLine":5,"endColumn":14},{"ruleId":"557","severity":1,"message":"595","line":2,"column":8,"nodeType":"559","messageId":"560","endLine":2,"endColumn":22},{"ruleId":"557","severity":1,"message":"640","line":9,"column":10,"nodeType":"559","messageId":"560","endLine":9,"endColumn":31},{"ruleId":"557","severity":1,"message":"594","line":32,"column":11,"nodeType":"559","messageId":"560","endLine":32,"endColumn":17},{"ruleId":"557","severity":1,"message":"590","line":28,"column":9,"nodeType":"559","messageId":"560","endLine":28,"endColumn":20},{"ruleId":"557","severity":1,"message":"641","line":9,"column":10,"nodeType":"559","messageId":"560","endLine":9,"endColumn":28},{"ruleId":"557","severity":1,"message":"590","line":71,"column":9,"nodeType":"559","messageId":"560","endLine":71,"endColumn":20},{"ruleId":"557","severity":1,"message":"600","line":5,"column":10,"nodeType":"559","messageId":"560","endLine":5,"endColumn":21},{"ruleId":"557","severity":1,"message":"599","line":5,"column":23,"nodeType":"559","messageId":"560","endLine":5,"endColumn":29},{"ruleId":"557","severity":1,"message":"642","line":1,"column":70,"nodeType":"559","messageId":"560","endLine":1,"endColumn":90},"no-native-reassign",["643"],"no-negated-in-lhs",["644"],"no-unused-vars","'Examination' is defined but never used.","Identifier","unusedVar","'DemographicData' is defined but never used.","'History' is defined but never used.","'Pain' is defined but never used.","'Sensory' is defined but never used.","'physiomaticApi' is defined but never used.","'response' is assigned a value but never used.","'cordinate' is assigned a value but never used.","'setCordinate' is assigned a value but never used.","'CustomizedTables' is defined but never used.","'changeHeading' is defined but never used.","'headings' is defined but never used.","'headings1' is defined but never used.","'rows' is defined but never used.","'rows1' is defined but never used.","'rows2' is defined but never used.","'rows3' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["645"],"'appointmentsTableData' is defined but never used.","'missedAppointmentsTableData' is defined but never used.","'cancelledAppointmentsTableData' is defined but never used.","'Divider' is defined but never used.","'ehrTableData' is defined but never used.","'AddPatientDetails' is defined but never used.","'feedbackTableData' is defined but never used.",["646"],"'_' is defined but never used.","'renderError' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Radio' is defined but never used.","'PointingError' is defined but never used.","'errors' is assigned a value but never used.","'BasicContainer' is defined but never used.","'getExerciseById' is defined but never used.",["647"],"'category' is assigned a value but never used.","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'ProgramBuilder' is defined but never used.","'formData' is assigned a value but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'GET_EXERCISE_BY_ID' is defined but never used.","'checked' is assigned a value but never used.","'toggleCheckbox' is assigned a value but never used.","'useState' is defined but never used.","'handleSubmit' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Exercise' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'test' is assigned a value but never used.","'Validator' is defined but never used.","'validate' is defined but never used.",["648"],"'TextareaAutosize' is defined but never used.","'invoices' is defined but never used.","React Hook React.useEffect has missing dependencies: 'id' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["649"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'tableData'.","ArrowFunctionExpression","unsafeRefs","'ListItem' is defined but never used.","'patients' is defined but never used.","'treatments' is defined but never used.",["650"],"'count' is assigned a value but never used.","'Form' is defined but never used.","'diagnosisTableHeading' is defined but never used.","'makeMaskFromFormat' is defined but never used.","'GET_MOTOR_DATA_BY_ID' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"651","fix":"652"},{"desc":"651","fix":"653"},{"desc":"651","fix":"654"},{"desc":"651","fix":"655"},{"desc":"656","fix":"657"},{"desc":"651","fix":"658"},"Update the dependencies array to be: [props]",{"range":"659","text":"660"},{"range":"661","text":"660"},{"range":"662","text":"660"},{"range":"663","text":"660"},"Update the dependencies array to be: [id, props]",{"range":"664","text":"665"},{"range":"666","text":"660"},[1927,1929],"[props]",[384,386],[970,972],[671,673],[971,973],"[id, props]",[1601,1603]]